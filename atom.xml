<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hi there, I'm Michal]]></title>
  <link href="http://mostr.github.com/atom.xml" rel="self"/>
  <link href="http://mostr.github.com/"/>
  <updated>2015-03-30T20:44:38+02:00</updated>
  <id>http://mostr.github.com/</id>
  <author>
    <name><![CDATA[Michal Ostruszka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala case classes to and from tuples]]></title>
    <link href="http://mostr.github.com/blog/2015/03/30/scala-case-classes-to-and-from-tuples/"/>
    <updated>2015-03-30T18:53:00+02:00</updated>
    <id>http://mostr.github.com/blog/2015/03/30/scala-case-classes-to-and-from-tuples</id>
    <content type="html"><![CDATA[<p>This one is going to be pretty quick and it&#8217;s more like note to self, but maybe some of you find if helpful too.</p>

<p>Have you ever had to convert between case classes and tuples in your Scala code? It&#8217;s not something you do every day, all day long but it happens to me from time to time. The worst thing here is I constantly keep forgetting how to do <strong>exactly</strong> this dance and have to look for it in APIs or fallback to Google/Stack Overflow for that. So without further ado, let&#8217;s go to the codes.</p>

<p>There is <code>User</code> case class defined as follows</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">User</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">email</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">age</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Say you have a tuple that &#8220;looks like&#8221; <code>User</code>&#8217;s parameters list. It&#8217;d be nice to be able to use <code>User.apply</code> on it, wouldn&#8217;t it?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// this is regular Tuple3</span>
</span><span class='line'><span class="k">val</span> <span class="n">userLikeData</span> <span class="k">=</span> <span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;john@doe.com&quot;</span><span class="o">,</span> <span class="mi">33</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">user</span> <span class="k">=</span> <span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="n">apply</span> <span class="k">_</span><span class="o">).</span><span class="n">tupled</span><span class="o">(</span><span class="n">userLikeData</span><span class="o">)</span>
</span><span class='line'><span class="c1">// =&gt; User(&quot;John&quot;, &quot;john@doe.com&quot;, 33)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In short it takes <code>User.apply</code> as a function first. On every function (here of type <code>Function3</code>) you can invoke <code>tupled</code> to convert its parameters list to corresponding tuple type. Because it&#8217;s all about <code>Function</code> the example above can also be written as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Function</span><span class="o">.</span><span class="n">tupled</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="n">apply</span> <span class="k">_</span><span class="o">)(</span><span class="n">userLikeData</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>or even simpler (big thanks to <a href="http://twitter.com/kpciesielski">@kpciesielski</a> for pointing this out):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">User</span><span class="o">.</span><span class="n">tupled</span><span class="o">(</span><span class="n">userLikeData</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last one is possible only if <code>User</code> doesn&#8217;t have companion object. Ok, let&#8217;s get tuple back out of already created case class instance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// this is regular User</span>
</span><span class='line'><span class="k">val</span> <span class="n">user</span> <span class="k">=</span> <span class="nc">User</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;john@doe.com&quot;</span><span class="o">,</span> <span class="mi">33</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">User</span><span class="o">.</span><span class="n">unapply</span><span class="o">(</span><span class="n">ben</span><span class="o">).</span><span class="n">get</span>
</span><span class='line'><span class="c1">// =&gt; (&quot;John&quot;, &quot;john@doe.com&quot;, 33)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it. Case classes have <code>unapply</code> which returns <code>Option</code> with tuple inside. Just <code>get</code> from this option to receive plain tuple with user&#8217;s data.</p>

<h2>Bonus points - real classes</h2>

<p>Is above possible with regular classes (not case classes) too? Let&#8217;s see</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Address</span><span class="o">(</span><span class="n">city</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">street</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We don&#8217;t have any <code>apply</code> here to use (it&#8217;s not real function), but there is good ol&#8217; partial application that we can use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">addressCtorFn</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="k">_</span><span class="o">,</span> <span class="k">_</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'><span class="c1">// =&gt; (String, String, Int) =&gt; Address</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have a function which basically works like <code>Address</code> constructor and already know what to do with it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Function</span><span class="o">.</span><span class="n">tupled</span><span class="o">(</span><span class="n">addressCtorFn</span><span class="o">)</span>
</span><span class='line'><span class="c1">// =&gt; ((String, String, Int)) =&gt; Address</span>
</span><span class='line'><span class="c1">// or simply</span>
</span><span class='line'><span class="n">addressCtorFn</span><span class="o">.</span><span class="n">tupled</span>
</span><span class='line'><span class="c1">// =&gt; ((String, String, Int)) =&gt; Address</span>
</span></code></pre></td></tr></table></div></figure>


<p>And done, now you can build regular <code>Address</code> classes out of tuples (if they match, obviously).</p>

<p>There is no way (at least at my current Scala-fu level) that would allow getting tuples back from regular classes. If it is somehow possible and you know the right lines, just drop me a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You don't always need AngularJS DI in directives]]></title>
    <link href="http://mostr.github.com/blog/2015/01/18/angular-directives-di/"/>
    <updated>2015-01-18T22:43:00+01:00</updated>
    <id>http://mostr.github.com/blog/2015/01/18/angular-directives-di</id>
    <content type="html"><![CDATA[<p>This post is a follow up to the discussion about Angular directives we had recently in <a href="http://softwaremill.com">SoftwareMill</a> with <a href="https://twitter.com/marcin_kubala">Marcin Kubala</a>. Marcin was working on refreshing our Scala with AngularJS scaffolding project called <a href="https://github.com/softwaremill/bootzooka">Bootzooka</a>.</p>

<h2>Use case</h2>

<p>We want to display some notifications to user (think of it as a Twitter Bootstrap&#8217;s &#8220;alert&#8221; component). This is to let user know for example that changes he made were either successfuly saved or not, or display any other information user would be able to dismiss once read. There is usually one such place in application that displays that kind of things.</p>

<h2>To the code</h2>

<p>So let&#8217;s say we have Angular component to keep and manage (add new, dismiss) messages to display. It&#8217;s gonna be <code>factory</code> so that it nicely encapsulates data and behavior we need and it&#8217;s easily injectable to almost any other component. Here is slightly simplified version, just for this post&#8217;s purposes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;MessagesStore&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">messages</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">dismiss</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">messages</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">messages</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">messages</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">text</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">messages</span><span class="o">:</span> <span class="nx">messages</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">dismiss</span><span class="o">:</span> <span class="nx">dismiss</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">add</span><span class="o">:</span> <span class="nx">add</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we have place to store and access messages to be displayed, let&#8217;s make it displayable with directive. At first we&#8217;ll define simple template for directive to use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;messages.html&quot;</span> <span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">ul</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;messages&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;m in msgSource.messages&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="p">{{</span> <span class="nx">m</span><span class="p">.</span><span class="nx">type</span> <span class="p">}}</span><span class="o">:</span> <span class="p">{{</span> <span class="nx">m</span><span class="p">.</span><span class="nx">text</span> <span class="p">}}</span> <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;msgSource.dismiss(m)&quot;</span><span class="o">&gt;</span><span class="nx">dismiss</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>No rocket science here, just simple <code>ng-repeat</code> to display all stored messages. Also each displayed message can be dismissed by user by clicking <strong>dismiss</strong> button next to it. Now, let&#8217;s move on to the actual directive:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;messages&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MessagesStore</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;messages.html&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">scope</span><span class="p">.</span><span class="nx">msgSource</span> <span class="o">=</span> <span class="nx">MessagesStore</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see to let directive know about messages to display we simply inject <code>MessagesStore</code> and make use of it (in this case simply assigning it to <code>msgSource</code> used in template). Obviously if there were other stuff to be done (like auto-dismissing messages after some time etc.) there would be more code in <code>link</code> function, but let&#8217;s not complicate things.</p>

<p>And now&#8230; it&#8217;s done, you may say. It works like a charm, displays any messages that are already stored in <code>MessagesStore</code> and lets you dismiss every single one. Sure, but I personally see one drawback here: this directive is tightly coupled to <code>MessagesStore</code> service. You cannot use it without having this service around and I don&#8217;t feel this is the best solution. I like to have my directives being independent from other components as much as possible. So let&#8217;s see how can we deal with it and make it a bit better.</p>

<h2>&#8220;Events!&#8221;, you may say</h2>

<p>And you&#8217;re right&#8230; more or less. Events and publish/subscribe patterns in general give fairly good decoupling. Simply use pub/sub system built into Angular itself. Let&#8217;s see how it would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;messages&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;messages.html&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">el</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">messages</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;msg&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">messages</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">text</span> <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">dismiss</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">messages</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">messages</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">scope</span><span class="p">.</span><span class="nx">msgSource</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">messages</span><span class="o">:</span> <span class="nx">messages</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">dismiss</span><span class="o">:</span> <span class="nx">dismiss</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>To display a message you need to publish a <code>msg</code> event from the <code>$rootScope</code>, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;msg&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;info&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;I am message from event&#39;</span><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks like fairly good way of getting rid of dependencies in directive. Actually it still has one <code>$rootScope</code>, but it&#8217;s not that bad as &#8220;everything&#8221; in Angular is in some scope and technically you could with minimal effort use directive&#8217;s <code>scope</code> instead. But there is one thing that bothers me in this approach: there is no clear concept of messages and messages store. Also there is no clear API saying how it can be used. See? No <code>MessagesStore</code> anywhere, entire well-defined part of the system got blurred somewhere. Now suppose you need two different notifiers in one application displaying different notifications. You can&#8217;t do that with this evented version shown above. This is because both instances of directive will react on the same event, and will consequently display the same messages. This isn&#8217;t what you want, right? There is another issue that relates to events in general: if you abuse events and pub/sub in general you&#8217;ll have hard times when reasoning about the code, tracking all the events and their handlers, order of execution etc. It looks like it&#8217;s better in terms of dependencies-coupling, but it has its own problems. So is there a hope? Sure it is (if not why would I write that thing anyway?)</p>

<h2>Make it work, then make it right&#8230;</h2>

<p>So, both solutions work and are perfectly fine in some kind of applications. But I personally like to have my directives to be as independent and reusable as possible. Let&#8217;s say I want exactly the same component in my other application: I can&#8217;t easily take the first one without taking <code>MessagesStore</code> with it. Suppose <code>MessagesStore</code> depends on yet another service and you end up with whole dependency tree to satisfy while you don&#8217;t really need it in your project. Taking the events-based version introduces yet another event publisher and subscriber to complicate your app a bit more. They in turn introduce events that aren&#8217;t &#8220;native&#8221; to your app, they are breaking naming conventions, etc.</p>

<p>Let&#8217;s define what we really want: reusable directive with possibly minimal set of &#8220;component-based&#8221; dependencies that need to be satisfied, that has well defined API and clearly visible domain concept it interacts with.</p>

<p>In both solutions shown above, directive itself comes down to <code>&lt;messages&gt;&lt;/messages&gt;</code> snippet in your view. But directives usage can communicate much more, it can define API, entry points. Instead of relying on directive taking service as dependency on framework level (or internally listening for specific event), provide it with <code>MessagesStore</code>-like object that it could interact with. Pass it to directive&#8217;s isolated scope and make it whatever you want (just stick to <code>MessagesStore</code> API).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;messages&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">msgSource</span><span class="o">:</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;messages.html&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all, as simple as that. Now, use it as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;messages</span> <span class="na">msg-source=</span><span class="s">&quot;msgStore&quot;</span><span class="nt">&gt;&lt;/messages&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because every directive&#8217;s instance lives in some controller&#8217;s scope, just let controller provide stuff that this directive needs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;AppCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">MessagesStore</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">store</span> <span class="o">=</span> <span class="nx">MessagesStore</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It may look like unnecessary complexity introducing kind of level of indirection, but think of it: when you need to use this directive in any other project you just take it (with no deps) and the only thing to make it working is to provide it with something that quacks like <code>MessagesStore</code>. When you need several instances of such notifier - no worries, just provide each one with separate <code>MessagesStore</code> like object. Doesn&#8217;t matter whether the <code>MessageStore</code>-like thing is service, factory or just simple object created ad-hoc in controller, directive doesn&#8217;t care unless you obey API contract. Another benefit for me personally is that this form of directive (taking attribute defining messages source) is way more readable. It&#8217;s way more informative than cryptic <code>&lt;messages&gt;&lt;/messages&gt;</code> thing.</p>

<p>And that&#8217;s all, that&#8217;s how I&#8217;d code that for now. There is nothing new, nothing complicated and definitely no magic (well, maybe except directive&#8217;s <code>=</code>, for some less experienced angularians). Conceptually this is still dependency injection but key point here is that you don&#8217;t always need to couple stuff on framework level with its own DI, even if it&#8217;s perfectly doable and easy. Think of long term project development, maintenance, about components reusability, your fellows developers, etc. I&#8217;m not saying this is silver bullet and will work in all your projects, and you should ban injecting any dependencies to directives - I&#8217;m far from that. Just think how would you like to use that directive if you were newcomer and what are potential tradeoffs of each solution (because you always have at least two, don&#8217;t you?).</p>

<p>Regarding <a href="http://c2.com/cgi/wiki?YouArentGonnaNeedIt">YAGNI</a> and not complicating stuff if not required for those who may doubt: initial discussion that triggered this post took place during <strong>migration of some Angular components</strong> from <a href="http://codebrag.com">Codebrag</a> to <a href="https://github.com/softwaremill/bootzooka">Bootzooka</a>, so as you can see thinking a bit about reusability isn&#8217;t that bad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scalaval - dead simple Scala validation micro library]]></title>
    <link href="http://mostr.github.com/blog/2014/07/23/scalaval-simple-scala-validation/"/>
    <updated>2014-07-23T08:31:00+02:00</updated>
    <id>http://mostr.github.com/blog/2014/07/23/scalaval-simple-scala-validation</id>
    <content type="html"><![CDATA[<p>I&#8217;m big fan of what I call &#8220;lego approach&#8221; in software development. It means building project stack using many but small and focused libraries or frameworks where I can tweak every aspect of this project stack. I prefer this over full blown &#8220;platforms&#8221; which give you everything you <em>may</em> need together with tons of complexity and time required to learn stuff. This &#8220;micro libraries&#8221; approach is strong in JavaScript, especially node.js community as there are tons of npm modules that are really tiny and do one specific thing so you can compose your stack with number of such modules. The same thing is emerging in Ruby ecosystem, see <a href="http://microrb.com/">microrb.com</a>.</p>

<p>I&#8217;m not sure yet how it is in Scala, but it just got one more, new micro library authored by me. This one is called <a href="http://github.com/mostr/scalaval">ScalaVal</a> and aims to help you writing validation in your application. Project&#8217;s README answers &#8220;Why&#8221; question pretty well, I think:</p>

<blockquote><p>Because every project bigger than HelloWorldApp requires data validation at some point. Reinventing the structure and validation handling boilerplate every time you need one is definitely not something developers enjoy. I too had this pain when hacking on <a href="http://codebrag.com">Codebrag</a>.</p>

<p>This small utility aims to provide minimal framework to write your validation logic, act as a guard between data and action and collect results in unified way. That&#8217;s all it does. And it&#8217;s really, really tiny. No external dependencies and no magic included. Just boilerplate.</p></blockquote>

<p>ScalaVal was just released to Maven Central in 0.1 version and works with Scala 2.10+. For usage examples please consult <a href="http://github.com/mostr/scalaval">projects README</a>, or (even better) see <a href="https://github.com/mostr/scalaval/tree/master/src/test/scala/com/softwaremill/scalaval">project&#8217;s specs</a>.</p>

<p>Entire source code is one, quite small source file (there is way more test code there). It may look silly to release something like this as full blown open source project, but as I said - I&#8217;m in love with micro-libraries approach and I really appreciate that I can take small library like this and it solves me exactly one issue in my project - specifically data validation in this case.</p>

<p>It&#8217;s my first scala open source thing so I&#8217;m pretty excited even if it&#8217;s just few lines of code. In case you spot any issue PRs are welcome, as well as comments and other ideas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On managing dependencies in javascript build system]]></title>
    <link href="http://mostr.github.com/blog/2014/05/26/npm-dependencies/"/>
    <updated>2014-05-26T09:06:00+02:00</updated>
    <id>http://mostr.github.com/blog/2014/05/26/npm-dependencies</id>
    <content type="html"><![CDATA[<p>Every serious project depends on libraries or modules written by other developers. We don&#8217;t want to reinvent the wheel and prefer to use available tried and tested solutions to do our stuff. And here comes dependency management, a way to maintain versions of libraries we use in our projects. It applies to both libraries we use in production application as well as libraries/tools we use to support our development and automation of our workflow. In Javascript there are two most popular ways of handling dependencies: for frontend components there is <a href="http://bower.io">Bower</a> and there is <a href="http://npmjs.org">npm - node packaged modules</a> which is, well&#8230; package manager for node.js. Here is my take on managing dependencies with npm but it describes only developer&#8217;s workflow support. I&#8217;m not gonna talk about Bower or any other way of managing frontend-only components, as well as node.js-based production deployments, maybe some time soon.</p>

<p>In <a href="http://codebrag.com">Codebrag</a> we have completely separated frontend application and use <a href="http://gruntjs.com">GruntJS</a> as a build tool for that. As this is node.js-based tool we also make use of npm to manage all the dependencies (grunt plugins etc). There are basically two approaches I&#8217;ve found so far to handle that in node.js based projects, both of which with their pros and cons:</p>

<ul>
<li>commit all dependencies into VCS</li>
<li>rely on <code>package.json</code> file and <code>npm install</code></li>
</ul>


<h2>node_modules - commit or not</h2>

<p>Why would you want to commit all your dependencies to your version control system? It&#8217;d significantly increase your repo size, right? That&#8217;s true, but the most important advantage here is that your application is ready to go immediately after cloning repo. It means you don&#8217;t have to rely on any external repository (be it official npm registry or your local network cache), you just clone your repo and boot up your application - no more <code>npm install</code> required. Looks like pretty cool thing, huh?</p>

<p>Well, I&#8217;m not convinced that much and let me tell you why. I come from java development world where you have tools like Maven, gradle etc. with both central and your local repositories. No dependency is commited to your repository. Sure, it used to be the case years ago when people were not using any standard way of managing dependencies - all libraries your project required were checked into VCS. Also for me it is natural that my project repository contains only this project&#8217;s code without any external dependencies. Another thing is that in case of dependencies being commited to VCS every single change in <code>package.json</code> must be manually handled in repository - clean up unused packages, add new etc. One more reason I don&#8217;t feel this approach is my fav one is that you sometimes depend on packages that are platform-dependent, like phantom-js which has different binaries for different platforms. How would you handle that when your dev platform is different from production one (e.g. Mac and Linux)? Would you commit all possible versions? So as you can see, there is a lot of things to consider when choosing your way. There are discussions around all this &#8220;commit or not&#8221; all over the internet so you can read other people&#8217;s opinions before choosing your own way.</p>

<h2>npm install</h2>

<p>Now let&#8217;s move to the other option which sounds better to me personally. It&#8217;s something I&#8217;m used to and it doesn&#8217;t clutter your project&#8217;s repo with tons of dependencies. You have them all defined in <code>packages.json</code> file and doing simple <code>npm install</code> fetches them for you. After that you are theoretically ready to boot up your application. But that&#8217;s not that easy. While defining version of your dependency you can either put strict version, like <code>1.2.3</code>, or you can say <code>&gt;1.2</code> or even <code>~1.2</code> (which is &#8220;reasonably close to 1.2&#8221;) etc. It means you can define ranges of applicable version. And this is where  things get way more complicated. Say, you depend on module <code>foo</code> in <code>1.0.2</code> version and it in turn depends on module <code>bar</code> in version <code>&gt;2.1.0</code>. You have no control over <code>bar</code> version as it is transitive dependency coming with <code>foo</code>. Whenever <code>bar</code> gets released in new version that satisfies <code>&gt;2.1.0</code> you get this new version, even though you don&#8217;t want that and you haven&#8217;t changed anything in your dependencies. This is where your build may go unstable and where real WTF happens. There are many issues that can bite you there, in <a href="http://codebrag.com">Codebrag</a> we had problems with non existing versions, npm servers returning 403 and so on. All that with no single change in our dependencies. So as you can see, this approach doesn&#8217;t force you to maintain the entire jungle when you only want one banana, but it has its own drawbacks.</p>

<h2>npm shrinkwrap</h2>

<p>So is there any other way to handle that? Yes, there is and it&#8217;s kind of variation of the one above. It&#8217;s called <a href="https://www.npmjs.org/doc/cli/npm-shrinkwrap.html"><code>npm shrinkwrap</code></a>. This tiny feature of <code>npm</code> effectively resolves all the dependencies tree from what is currently installed in <code>node_modules</code> and locks all the versions down. It creates file <code>npm-shrinkwrap.json</code> next to <code>package.json</code> which is used to determine versions while doing subsequent <code>npm install</code> calls. Now (going back to the foo bar example from above) even if new &#8216;bar&#8217; gets released you will not be impacted by this, because you have current version locked and your dependencies tree is always the same. Again this looks like perfect solution - no deps checked into VCS and deterministic versions all the time, yay! Again, not so fast cowboy. Generated file doesn&#8217;t care whether given dependency is production- or dev-related. By default <code>npm shrinkwrap</code> ignores dev dependencies, but you can force it to use them using <code>--dev</code> switch. But this means that doing subsequent <code>npm install</code> your dev dependencies will be also installed on your production environment, so be aware of that.</p>

<h3>Summary</h3>

<p>The above drawback applies only to node.js applications which is not our case. In <a href="http://codebrag.com">Codebrag</a> we use node.js + npm + grunt to automate our workflow so every dependency in our <code>package.json</code> is dev dependency. It means we can safely use <code>npm shrinkwrap --dev</code> to lock down versions of entire dependencies tree. So whenever you choose not to commit your npm dependencies into your VCS, be aware of this versioning gotcha and consider shrinkwrapping your deps. When the only node.js-based code in your application is the one supporting your frontend build system, <code>npm shrinkwrap --dev</code> seems to be perfect fit for you. Just remember that whenever you change anything dependencies-related in <code>package.json</code>, you need to shrinkwrap it again after new package lands in <code>node_modules</code> so new dependency version gets locked down.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeeCON 2014 - my brain-dump from the conference]]></title>
    <link href="http://mostr.github.com/blog/2014/05/18/geecon-2014-braindump/"/>
    <updated>2014-05-18T11:18:00+02:00</updated>
    <id>http://mostr.github.com/blog/2014/05/18/geecon-2014-braindump</id>
    <content type="html"><![CDATA[<p>Last weeks were pretty intensive to me in the context of my professional life. I had a pleasure to speak on <a href="http://4developers.org.pl">4Developers</a> conference, then attend <a href="http://front-trends.com">FrontTrends 2014</a> and finally speak at another awesome <a href="http://2014.geecon.org">GeeCON 2014</a> conference. On both 4Developers and GeeCON I gave the same talk (with slight changes) and you can find slides from that talk here  <a href="https://speakerdeck.com/mostr/building-modern-web-applications-single-responsibility-principle-applied-1">&#8220;Building modern web applications - Single Responsibility Principle applied&#8221;</a>. At GeeCON all talks were recorded so video should be online some time soon if you would like to watch it. It was also the first conference at which I changed the way I learnt from talks. I used an advice from the article shared by Tomek on twitter:</p>

<blockquote class="twitter-tweet" lang="en"><p>Worth to read while you&#39;re at <a href="https://twitter.com/search?q=%23geecon&amp;src=hash">#geecon</a>: Min / Max Note Taking for Conferences - <a href="http://t.co/L0hIluYeCH">http://t.co/L0hIluYeCH</a></p>&mdash; Tomasz Dziurko (@TomaszDziurko) <a href="https://twitter.com/TomaszDziurko/statuses/466504026004410368">May 14, 2014</a></blockquote>


<script async src="http://mostr.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p></p>

<p>I must say it worked out pretty well. Now when the conference is over I have my paper notes full of  bullet points and comments and I know exactly what ideas I want to apply and which to explore further. From my personal point of view this year GeeCON was one of the best conference events I&#8217;ve ever attended. I&#8217;m not only talking about being a speaker, although it was a great honor to me to speak there. Let me briefly summarize it. So here it goes.</p>

<p>At the beginning of first day I was feeling quite unsatisfied with my choices - I didn&#8217;t enjoy second keynote as much as I expected (I couldn&#8217;t attend the first one). The same applied to Arun Gupta&#8217;s talk about getting kids to programming. I was expecting something more than just review of tools available. I was expecting more of his own, hands on experience and more tips &amp; tricks about that topic. So it wasn&#8217;t the best conference start, wasn&#8217;t it?</p>

<h2>Go - the language of the cloud</h2>

<p>And then it clicked. I went to Ken Sipe&#8217;s talk about Go language, remembering his great talk about Spock from previous GeeCON. I had no previous experience with Go and although this session lacked this &#8220;language of the cloud&#8221; explanation I was delighted with it. Now, Go language is on my short-list of things to try out soon after the conference.</p>

<ul>
<li>Platform native &amp; fast compiler</li>
<li>Mix of pascal, js, scala, java in terms of syntax</li>
<li>Channels for concurrency</li>
<li>One ultimate formatting</li>
<li>Safe pointers</li>
<li>Kind of duck typing</li>
</ul>


<h2>Keep it simple with Scala</h2>

<p>As I haven&#8217;t written single line of code in Java for last 1,5 year (coding backend side of <a href="http://codebrag.com">Codebrag</a> in Scala and playing with languages other than Java) it was easy shot to go to the talk by my <a href="http://softwaremill.com">SoftwareMill</a> buddy, Adam Warski. In short - excellent session with perfect live coding but&#8230; if you had no previous experience in Scala it could be a bit of mind-bending kind of talk.</p>

<ul>
<li>Scala async to write async code more like sync one</li>
<li>Spray.io - instant, simple HTTP API server</li>
<li>Macwire - dependency injection built on macros</li>
<li>Probably mind-blowing talk for Scala newbies</li>
</ul>


<h2>DIY - Usability design for developers</h2>

<p>Next one on my radar was this nice talk about doing UX researches, trying different concepts, tools and techniques. We used to use some of them in <a href="http://codebrag.com">Codebrag</a> so it wasn&#8217;t completely new to me. As I love working with frontends in web applications I wanted to learn something more about UX and I was pretty satisfied I went to this one.</p>

<ul>
<li>Pen and paper to sketch UI</li>
<li>Iterate!</li>
<li>5-6-8 set up 5 mins timer and sketch 6 to 8 different proposals</li>
<li>User testing - like in Codebrag</li>
<li>Java FX with minimal styles used as prototyping tool?</li>
</ul>


<h2>Project Avatar - server side JS on JVM</h2>

<p>As far as I understand and fully support porting node.js implementation to JVM to make use of this awesome platform (multithreading, java ecosystem etc) I couldn&#8217;t understand the point of adding another complexity and layer to that and tightly integrating it with JavaEE. I can see no benefits from using that mix in practice. Although the talk itself was quite good, I&#8217;m completely not convinced as for the use cases and future of Project Avatar. Maybe that&#8217;s because I left JavaEE behind some time ago in favor of building smaller application stacks and tweaking it according to my needs using various micro-libraries available. Also it&#8217;s worth mentioning that Project Avatar is a different beast than Avatar.js which is the thing I&#8217;m ok with and which simply brings node.js model to JVM.</p>

<ul>
<li>Avatar.js bundled with JavaEE</li>
<li>Background threads similar to WebWorkers</li>
<li>What are use cases? Where could I apply JS?</li>
<li>Why building yet another layer on top of e.g. JPA?</li>
<li>Looks like heavy, enterprise-ish stack</li>
</ul>


<p>First day GeeCON party was ok. I had quite a few pleasant chats with other geeks over a beer but I had to leave it early as I had my talk on the next day (I was getting a bit nervous already and also wanted to rehearse it once again).</p>

<h2>Deploying And Testing Microservices</h2>

<p>On the second day I deliberately missed first session slot as I couldn&#8217;t find anything I really wanted to go on this slot. It was completely opposite the next one. I knew I&#8217;d go to learn more about (currently all the rage) microservices from Sam Newman. I remembered his excellent talks from last two GeeCON editions. I learnt about taking different approach to testing and deploying microservices and I was happy that things I privately play with (like Vagrant, Packer and Docker) were mentioned as valuable tools in that kind of projects. As a frontend lover I was curious about UI aspect of microservices and finally had a chance to ask Sam about that during the 2nd day party. We had a quite long chat about different approaches and it surprisignly turned into possible Sam&#8217;s next talk idea :) I was also convinced by him to give Clojure yet another (third) try and really try Go lang.</p>

<ul>
<li>Rethink the way you test when in microservices land</li>
<li>Last tests after production deployment (!)</li>
<li>Virtualization FTW! Vagrant, Packer, Docker</li>
<li>ThoughtWorks uses Ansible for provisioning</li>
<li>One service per machine means huge costs overhead</li>
<li>Virtualize: LXC</li>
<li>Pact - customer-driven contracts</li>
<li>Mountebank - stub service on different protocols</li>
<li>Better have 2 versions of API for some time than two separate services</li>
</ul>


<h2>Building modern web applications - SRP applied</h2>

<p>Then I attended, well&#8230; my talk, as a speaker. Taking into account great competition during the same slot (e.g. Ken Sipe about Spock and Arun Gupta on JavaEE 7) I was surprised that I had pretty good number of geeks on the audience. The talk went pretty well I guess and I had several valuable discussions afterwards. By the way, if you attended it and had any kind of feedback to me - I&#8217;d be more than happy to hear about it.</p>

<h2>Docker - intro to revolution</h2>

<p>After the most stressful part of the day I could finally sit back, relax and enjoy the rest of the conference. I went to Marek Goldmann&#8217;s talk about Docker, where I found out about freshly baked Project Atomic as well as about some facts from Docker world I didn&#8217;t know before. Good talk with a lots of real, live command line coding examples.</p>

<ul>
<li>Start up tons of containers in almost no time</li>
<li>Sharing images</li>
<li>Project Atomic - infrastructure management</li>
</ul>


<h2>High performance, reactive applications with Vert.x</h2>

<p>Last of full-blown, long talks I choose was one by Tim Fox introducing Vert.x. I&#8217;ve just heard about but have never played with Vert.x so decided to give it a try (all in all it among the others mixes up some of my favorite runtimes and languages: JVM, Ruby and JS). Having a great chat with Tim after the talk I found that it&#8217;s quite complicated at this stage to bring native ruby/js(npm) modules/libs to work on vert.x but I guess it&#8217;s just a matter of time.</p>

<ul>
<li>Lots of languages available or support landing soon</li>
<li>Messaging bus that can reach frontend</li>
<li>How to add additional modules (jar, npm modules etc)?</li>
<li>Clustering and HA of processes</li>
<li>Work on Vert.x 3 starts now</li>
</ul>


<h2>Lightning talks</h2>

<p>For the lightning talks I choose Room 5 with great talk about self development by Bartosz Majsak, &#8220;ok&#8221; talk by Jakub Marchwicki about soft aspects of clean code. The last one, remote pair programming session was well&#8230; wasted due to some heavy technical issues.</p>

<p>As I left stress and nerves related to my talk behind I could finally relax over a beer with folks at another GeeCON party that night. The venue for speakers dinner as well as attendees party were both great allowing us to fully enjoy the party, have great chats and lots of fun there. Also I was unoficially invited to conduct workshops on awesome <a href="http://warsjawa.pl">Warsjawa</a> workshops conference this year (I had a pleasure to have hold AngularJS workshops last year there).</p>

<h2>Modular JavaScript</h2>

<p>Third day started to me from the second session about modules in JS by Sander Mak and Paul Bakker. Guys prefer AMD modules over CommonJS (and this is what they presented) and I use CommonJS recently but this entire talk was well served. I didn&#8217;t learn anything new in terms of modularity but I was convinced to try Typescript language and also to give AMD and RequireJS yet another try.</p>

<ul>
<li>Try Typescript</li>
<li>Typescript can compile to both AMD and CJS modules (ES6?)</li>
<li>Quite slow compiler, but has incremental mode (pretty good)</li>
<li>Nice that guys broke up with mvn for frontend build and moved to grunt</li>
</ul>


<h2>Modding Minecraft with a dash of Ruby</h2>

<p>Next I went to see some JRuby in action while poking Minecraft. I didn&#8217;t really know what to expect as I didn&#8217;t know much about Minecraft before, but the talk was really good and entertaining. Being able to create extensions to Minecraft with Java or with pretty syntax of Ruby is really cool and makes me want to try that. Also seeing what kind of freaky mods Tom Enebo was showing I was laughing out loud there together with the rest of the audience.</p>

<ul>
<li>Bukkit - library to extend Minecraft</li>
<li>Ruby wrapper for that</li>
<li>Tons of crazy ideas for extensions</li>
</ul>


<h2>Crafted Design</h2>

<p>Last talk I could attend (I had early train back home) was this one by Sandro Mancuso. I knew I wanted to go to this one so there was no doubt in this slot. Well served talk, practically discussing approaches to software development I fully support: thin server-side transport layer (VC in MVC model), controllers with 3-5 lines max, use cases as entry points to your application orchestrating all the required calls, separating read and write use cases and so on. After the talk tons of great questions and answers were given so I&#8217;m fully satisfied with this talk.</p>

<ul>
<li>Sane mix of several approaches</li>
<li>Thin web transport layer (VC in MVC)</li>
<li>Small controllers (3-5 lines) delegating to use cases</li>
<li>Use cases as entry points to application</li>
<li>Fast track for &#8220;read&#8221; use cases. Don&#8217;t use domain stuff. Builds required view directly on raw DB data</li>
<li>Rethink project packages organization</li>
</ul>


<h2>Summary</h2>

<p>This year GeeCON was probably one of the best and most valuable conferences I&#8217;ve ever attended. I stepped out of my comfort zone again and gave a talk in english. I met old friends and made some new ones, which was not a piece of cake to me. I&#8217;m not very &#8220;sociable&#8221; person when it comes to meeting new people. I&#8217;ll definitely go to GeeCON next year and can recommend it to all of you if in doubt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I never really loved Angular auto-unwrapping promises in view]]></title>
    <link href="http://mostr.github.com/blog/2013/12/05/angular-promises-unwrapping/"/>
    <updated>2013-12-05T08:23:00+01:00</updated>
    <id>http://mostr.github.com/blog/2013/12/05/angular-promises-unwrapping</id>
    <content type="html"><![CDATA[<p>One Angular feature that was visually cool (from developer&#8217;s perspective) was that you could pass promise directly to view and it work on it in HTML as if it was already resolved. I wrote &#8220;it was&#8221; because Angular folks decided to disable it by default in latest big 1.2 release - you can read more about it <a href="https://github.com/angular/angular.js/commit/5dc35b527b3c99f6544b8cb52e93c6510d3ac577">here</a>.</p>

<p>Let&#8217;s recap how this auto-unwrapping used to work before 1.2. Let&#8217;s have simple service that returns list of items wrapped in promise and call this service from controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ItemsListCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">itemsService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">itemsService</span><span class="p">.</span><span class="nx">loadItems</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">reload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">itemsService</span><span class="p">.</span><span class="nx">loadItems</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;itemsService&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">loadItems</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">items</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;item 1&#39;</span><span class="p">,</span> <span class="s1">&#39;item 2&#39;</span><span class="p">,</span> <span class="s1">&#39;item 3&#39;</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()];</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">items</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the view let&#8217;s display fetched items together with button to reload this list (it just fetches the same list again with random value added to clearly see it was reloaded).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;i in items&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;reload()&quot;</span><span class="nt">&gt;</span>Reload items<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>It&#8217;s a list except when it&#8217;s not</h2>

<p>You can play with this example on <a href="http://jsfiddle.net/mostr/kQjKH/2/">JSFiddle</a>. It works like a charm, displays items, reloads list and so on, so what&#8217;s the issue, you may ask?
Well, looking at the code of the controller it&#8217;s not obvious, that <code>$scope.items</code> is really a promise. It looks as simple assignment - you load items and assign list of those items to <code>$scope.items</code>. Nice and clean, but try to e.g. log size of this list, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ItemsListCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">itemsService</span><span class="p">,</span> <span class="nx">$log</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">itemsService</span><span class="p">.</span><span class="nx">loadItems</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">$log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// boom!</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll get <code>undefined</code> in console. Surprised? Maybe not in this simple case, but I expect it could bite you hard in real project with larger and more complicated codebase. To confuse you a bit more, when you try to display the same thing in view using <code>items.length</code> binding, it works fine. It is all because when dealing with <code>$scope.items</code> in controller you in fact deal with promise not the actual list of items, but on the view layer you get unwrapped result to play with.</p>

<h2>I disappear</h2>

<p>There is another surprise you can spot while relying on this automatic promises unwrapping. Let&#8217;s add some delay to our list loading function, so that it emulates fetching data from server (like in real HTTP call there is small delay as server needs to be called).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;itemsService&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$timeout</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">loadItems</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">dfd</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">$timeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">items</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;item 1&#39;</span><span class="p">,</span> <span class="s1">&#39;item 2&#39;</span><span class="p">,</span> <span class="s1">&#39;item 3&#39;</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()];</span>
</span><span class='line'>        <span class="nx">dfd</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">items</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">dfd</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again go to <a href="http://jsfiddle.net/mostr/7qAbP/2/">this fiddle</a> to see it running. Now when you hit &#8220;reload&#8221; button, this list disappears for a while and then appears back. This is again due to the fact that you pass raw promise to the view. It cannot render until this promise gets resolved, so it renders nothing and appears again when promise is resolved. So the longer the delay is the more unpleasant the experience can be. How to avoid that? One solution is to delay controller instantiation until promises are resolved (using resolve property on route) but that&#8217;s not one I&#8217;m gonna show here. The exact one is explicitly deal with promises like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ItemsListCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">itemsService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">itemsService</span><span class="p">.</span><span class="nx">loadItems</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">passItemsToScope</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">reload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">itemsService</span><span class="p">.</span><span class="nx">loadItems</span><span class="p">(</span><span class="nx">passItemsToScope</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">passItemsToScope</span><span class="p">(</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">items</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s few keystrokes more but for me it&#8217;s definitely worth it. Now you don&#8217;t touch existing items list until promise is resolved so swapping actual list is blazingly fast - go and try it <a href="http://jsfiddle.net/mostr/qG7jV/2/">there</a>. The list doesn&#8217;t disappear while waiting for promise to be resolved - it just stays there and gets reassigned and rerendered in (almost) one go. Another benefit is that this code clearly says what it does and aligns nicely with <a href="http://en.wikipedia.org/wiki/Principle_of_least_astonishment">Principle of least surprise</a>. You clearly see that what is returned from <code>itemsService.loadItems()</code> is a promise, so you can deal with it accordingly.</p>

<h2>Summary</h2>

<p>I don&#8217;t say that both of those points mentioned above are vailid in all cases. It can serve you well, especially the one with disappearing content (some may have such requirement). Anyway I&#8217;m personally (<a href="https://twitter.com/mostruszka/status/391253436382978049">really</a>) happy, that Angular folks decided to disable that feature from version 1.2+. Even if it was visually appealing, clean and so on it could potentially introduce a lot of WTFs to your daily work. If you by any chance really miss that feature, there is a way to bring it back, but I&#8217;m sorry I&#8217;m not gonna give you a clear hint how to do that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selectively run specs or suites in Jasmine]]></title>
    <link href="http://mostr.github.com/blog/2013/11/06/selective-specs-in-jasmine/"/>
    <updated>2013-11-06T22:38:00+01:00</updated>
    <id>http://mostr.github.com/blog/2013/11/06/selective-specs-in-jasmine</id>
    <content type="html"><![CDATA[<p>I&#8217;m sure you write tests for your code. There is no excuse for that, even for Javascript - language which used to be treated as a toy one some time ago. Now Javascript ecosystem changed and its toolbox is full of development tools also those for testing purposes.</p>

<p>One of the most popular testing tools for Javascript is <a href="http://pivotal.github.io/jasmine">Jasmine</a>. It can be run in browser via HTML runner or as a part of automated workflow (which I highly recommend to build for every serious JS app). Sometimes when working on some particular feature, or fixing some stuff you may not want to have all your specs in all suites run every time you touch source file. Suppose you have tons of tests failing (e.g. due to upgrade of some core library) with a lot of errors but you want to focus on just few of them and fix them one by one. It&#8217;d be great if there was an ability to let Jasmine know to run only specs you wanted. So how to to it? Looks like there is not much about it in Jasmine documentation. The only thing mentioned is you can disable given suite by changing <code>describe</code> to <code>xdescribe</code> or changing <code>it</code> to <code>xit</code> for single spec. But it&#8217;d be silly to disable hundreds of tests that way just to be able to run few others, right?</p>

<p>It turns out that there is much easier way to do that. Let&#8217;s look at the code below:</p>

<figure class='code'><figcaption><span>running single spec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Your awesome feature&#39;</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should do something&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// stuff here</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// only this spec will be run</span>
</span><span class='line'>  <span class="nx">iit</span><span class="p">(</span><span class="s1">&#39;should not do something other&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// stuff here</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above changing regular <code>it</code> in second spec definition to <code>iit</code> disables all other tests (in all suites that are about to run) except this one. To run whole suite with several specs in it just change <code>describe</code> to <code>ddescribe</code> and only this suite&#8217;s specs will be run. There is no need to add <code>iit</code> in every single spec inside. See the code below:</p>

<figure class='code'><figcaption><span>running single suite</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// only specs in this suite will be run</span>
</span><span class='line'><span class="nx">ddescribe</span><span class="p">(</span><span class="s1">&#39;Your awesome feature&#39;</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should do something&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// stuff here</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should not do something other&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// stuff here</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can mark several specs/suites that way and all of them will be run exclusively. This behavior although not well documented is Jasmine feature and is independent on runner you use to run your tests. I personally use <a href="http://karma-runner.github.io">Karma</a> and it works like a charm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Access and manipulate AngularJS $scope from browser's console]]></title>
    <link href="http://mostr.github.com/blog/2013/09/24/angularjs-in-browsers-console/"/>
    <updated>2013-09-24T12:28:00+02:00</updated>
    <id>http://mostr.github.com/blog/2013/09/24/angularjs-in-browsers-console</id>
    <content type="html"><![CDATA[<p>This one&#8217;s gonna be quick. Have you ever wanted to trigger some action in your AngularJS application from browser&#8217;s console? I mean, broadcast event (just for development/debug purposes), call functions on <code>$scope</code> or do other stuff? Let&#8217;s see what we can do with it.</p>

<p>Every AngularJS application is bound to exactly one DOM element e.g.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  // regular stuff here
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&quot;myApplication&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  // AngularJS stuff here
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It also means that every single DOM element within <code>body</code> (in example above) is bound to some instance of <code>Scope</code>. And that&#8217;s all we need - scope we can call functions on, change properties, access <code>$rootScope</code>, broadcast events etc. So let&#8217;s grab this scope to play with it. AngularJS adds some extras to existing jQuery (if loaded) or provides its own jQLite with those extras built-in. One of those extra features is ability to get reference to scope bound to given DOM element. Try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// in browser&#39;s console</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">scope</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="nx">Scope</span> <span class="p">{</span><span class="nx">$id</span><span class="o">:</span> <span class="s2">&quot;002&quot;</span><span class="p">,</span> <span class="nx">$$childTail</span><span class="o">:</span> <span class="nx">Child</span><span class="p">,</span> <span class="nx">$$childHead</span><span class="o">:</span> <span class="nx">Scope</span><span class="p">,</span> <span class="nx">$$prevSibling</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="err">…</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whoaa! Looks like we got scope reference. From now on you can do whatever you need with this scope. Obviously you can grab any DOM element (within AngularJS application), target it with jQuery and get its scope to play with. If you don&#8217;t have full blown jQuery loaded you can still do tricks as above but with using <code>angular.element</code> instead</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">sidebar</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsById</span><span class="p">(</span><span class="s1">&#39;sidebar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">scope</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">sidebar</span><span class="p">).</span><span class="nx">scope</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="nx">Scope</span> <span class="p">{</span><span class="nx">$id</span><span class="o">:</span> <span class="s2">&quot;00J&quot;</span><span class="p">,</span> <span class="nx">$$childTail</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">$$childHead</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">$$prevSibling</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="err">…</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing you need to remember about is if you want to fire an action on <code>$scope</code> from outside of AngularJS &#8220;world&#8221;, you need to wrap your stuff in <code>$scope.$apply</code> to let AngularJS know about your changes. So just to recap, fire an event using <code>$rootScope</code> from console would look like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// in browser&#39;s console</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sidebar</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsById</span><span class="p">(</span><span class="s1">&#39;sidebar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">scope</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">sidebar</span><span class="p">).</span><span class="nx">scope</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">rootScope</span> <span class="o">=</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">$root</span><span class="p">;</span>
</span><span class='line'><span class="nx">scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rootScope</span><span class="p">.</span><span class="nx">$broadcast</span><span class="p">(</span><span class="s1">&#39;myEvent&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="nx">myData</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you should now see your application reacting on this freshly baked event, raised from browser&#8217;s console.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fine-tune HTTP errors handling in AngularJS using custom request configurations]]></title>
    <link href="http://mostr.github.com/blog/2013/09/06/selective_http_errors_handling_in_angularjs/"/>
    <updated>2013-09-06T14:48:00+02:00</updated>
    <id>http://mostr.github.com/blog/2013/09/06/selective_http_errors_handling_in_angularjs</id>
    <content type="html"><![CDATA[<p>Let&#8217;s stay close to HTTP request/response cycle in AngularJS for a while. Remember <a href="http://michalostruszka.pl/blog/2013/07/31/double-requests/">my previous post</a> about throttling duplicated requests? I showed how to use <code>config</code> object populated with custom properties to control which HTTP requests are invoked and which are not. This time I&#8217;ll show you how to use the same <code>config</code> object but for playing with HTTP response.</p>

<p>Sometimes you may want for example to process different responses in different ways. Let&#8217;s take HTTP errors for example. When you receive response with HTTP code different that 2xx in most applications you probably want to let user know that something wrong happened, so you may decide to display some popup with error message. This can be easily achieved with response interceptors in AngularJS. Simply write and enable interceptor that handles all failed responses and does something (e.g. broadcasts an event with error details which is then handled by specialized directive that displays message to user). In the simplest form such interceptor may look as follows:</p>

<figure class='code'><figcaption><span>Simple HTTP errors handling interceptor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">).</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;httpErrorsInterceptor&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">EventsDict</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">successHandler</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">errorHandler</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$broadcast</span><span class="p">(</span><span class="nx">EventsDict</span><span class="p">.</span><span class="nx">httpError</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">cause</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">httpPromise</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">httpPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">successHandler</span><span class="p">,</span> <span class="nx">errorHandler</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It simply passes successful responses through and for error responses it broadcasts custom event (<code>EventsDict.httpError</code>) and then rejects it as it would be done normally. That&#8217;s cool, but suppose you have a feature in your application that has its own way of handling errors? In <a href="http://codebrag.com">Codebrag</a> we have &#8220;Invite others&#8221; form that after sending should display to user whether his invitation was sent or whether there was something wrong with it on the server side. Besides that we have general &#8220;error bubble&#8221; that is displayed when any error (including HTTP ones) occurs. As long as our &#8220;Invite others&#8221; form handles this case on its own we don&#8217;t need to display this standard bubble anymore for those requests.</p>

<p>Ideally we&#8217;d like to have a way to tell which requests should be even considered by our interceptor when processing response and which should be left alone and just passed through. So here is what we did. In Angular every HTTP response has <code>config</code> object attached to it and this is exactly the same <code>config</code> object as the one from corresponding request. Let&#8217;s make use of it again. When sending HTTP request let&#8217;s define custom property in its <code>config</code> object:</p>

<figure class='code'><figcaption><span>POST request with custom config property</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">data</span>  <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">invitationMsg</span><span class="o">:</span> <span class="s1">&#39;Hey! Come and join Codebrag&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">newUserEmail</span><span class="o">:</span> <span class="s1">&#39;foo@bar.com&#39;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/invitation&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="p">{</span><span class="nx">bypassErrorsInterceptor</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here it is. Custom <code>bypassErrorsInterceptor</code> property will be set for each requests of this type. Now the core stuff - let&#8217;s modify our simple interceptor to leave responses for those requests alone. Just let them be rejected without any other work, but keep watching and reacting on any other requests that don&#8217;t have this property set.</p>

<figure class='code'><figcaption><span>Complete interceptor with custom property handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">).</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;httpErrorsInterceptor&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">EventsDict</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">successHandler</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">errorHandler</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">config</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">bypassErrorInterceptor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$broadcast</span><span class="p">(</span><span class="nx">EventsDict</span><span class="p">.</span><span class="nx">httpError</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">cause</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">promise</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">successHandler</span><span class="p">,</span> <span class="nx">errorHandler</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done. Now every HTTP request with <code>bypassErrorsInterceptor</code> property set will be passed through and the rest will result with event broadcasting.</p>

<p>If you want to treat different HTTP error codes in different ways you can as well match responses by response code, send different events and display different messages to user - it&#8217;s up to you, this can be also done in interceptors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preventing duplicated requests in AngularJS]]></title>
    <link href="http://mostr.github.com/blog/2013/07/31/double-requests/"/>
    <updated>2013-07-31T22:12:00+02:00</updated>
    <id>http://mostr.github.com/blog/2013/07/31/double-requests</id>
    <content type="html"><![CDATA[<p><em>Note: You can read the same post published on <a href="http://blog.codebrag.com/post/57412530001/preventing-duplicated-requests-in-angularjs">Codebrag blog</a>.</em></p>

<p>You know the case when you hit submit button quickly enough that it sends the form twice? Or when you hit submit button and it seems that nothing happens, so you click it once again and another request is being fired? Duplicated requests issue - you can experience it in both traditional web application as well as in modern so-called Single Page Applications. I&#8217;d like to show you how it can be handled in AngularJS and how we did it in <a href="http://codebrag.com">Codebrag</a>.</p>

<p>AngularJS itself has no built-in stuff for that. You can fire as many HTTP requests as you want and it is up to you and your application&#8217;s code to handle it the way that would prevent double form submission. So let&#8217;s see what weapons we are armed with to win this battle.</p>

<h2>Disable button after submit</h2>

<p>Suppose you want to prevent user to double-submit the same form. You can write pretty simple AngularJS directive to disable button when clicked. It will effectively block this button from being pressed again until e.g. response comes back. I personally don&#8217;t really like this one, because you need to remember to put this directive on every form in you application. It looks like violating DRY a bit. So let&#8217;s look for something better.</p>

<h2>Asynchronous UI approach</h2>

<p>This is not a solution to this particular problem per se but more an approach to building web applications. <a href="http://blog.alexmaccaw.com/asynchronous-ui">Alex McCaw</a> has great post about it which I highly recommend reading. Basically the trick is not to wait for server&#8217;s response if it is not absolutely required. Simply act as if action was performed succesfully and immediately do what should be done on success. So let&#8217;s take our form submit example. When user clicks submit button you fire HTTP request as usual and close form (possibly doing something more too, like adding comment to list) without waiting for response from server. It effectively prevents user from resubmitting form as it disappears immediately after button click. Obviously there are some drawbacks too and there are also use-cases (like payments etc) where this approach isn&#8217;t recommended, but in most cases it will work fine. For more details I really recommend reading <a href="http://blog.alexmaccaw.com/asynchronous-ui">Alex&#8217;s post</a>.</p>

<h2>AngularJS-based solution</h2>

<p>Ok but this approach above requires rethinking and possibly changing significant stuff in you application. What if you don&#8217;t really want to do that? It turns out that solution for our initial problem can be quite easily implemented with tooling already available in AngularJS.</p>

<p>What we need to do is to &#8220;intercept&#8221; <code>$http</code> service calls and decide if given request should be sent or not. Angular has concept of http interceptors but only for responses, not for requests (yet). But fear not, we&#8217;ll use decorators. As official doc says</p>

<blockquote><p>Decoration of service, allows the decorator to intercept the service instance creation. The returned instance may be the original instance, or a new instance which delegates to the original instance.</p></blockquote>

<p>and that&#8217;s exactly what we need. So this is how decorator can be applied:</p>

<figure class='code'><figcaption><span>decorator usage</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">).</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$provide</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$provide</span><span class="p">.</span><span class="nx">decorator</span><span class="p">(</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$delegate</span><span class="p">,</span> <span class="nx">$q</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">app</span><span class="p">.</span><span class="nx">commons</span><span class="p">.</span><span class="nx">uniqueRequestsAwareHttpService</span><span class="p">(</span><span class="nx">$delegate</span><span class="p">,</span> <span class="nx">$q</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ll show you the details of implementation soon. Next issue to solve is how to determine when requests are identical and if one is already in progress? In the simplest form HTTP requests in AngularJS are done as below:</p>

<figure class='code'><figcaption><span>simple http call</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span><span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://api.myapp.com/comment&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;foo bar&#39;</span><span class="p">}};</span>
</span><span class='line'><span class="nx">$http</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>All other methods like shortcut <code>get</code>, <code>post</code> as well as <code>$resource</code> use this form internally.
It turns out we can freely add our own properties to this <code>config</code> object. They will help us identify requests. So we can for example modify the config above as follows:</p>

<figure class='code'><figcaption><span>modified config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://api.myapp.com/comment&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;foo bar&#39;</span><span class="p">},</span>
</span><span class='line'>  <span class="nx">unique</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">requestId</span><span class="o">:</span> <span class="nx">create</span><span class="o">-</span><span class="nx">comment</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This new config contains two new properties <code>unique</code> and <code>requestId</code>. The first one determines if for given types of requests we should check for duplicates or let all of them be sent (we probably can let all GET requests to go through without this check, and have e.g. POSTs checked). The second one, <code>requestId</code> is a property we&#8217;ll match on when looking for duplicates. In this case it has constant value (create-comment) which means that only one POST request to <code>http://api.myapp.com/comment</code> should be pending at any time. This value can be dynamically calculated (e.g. using <code>data</code> for more fine-grained control).</p>

<p>Ok, but how can we find out which requests are currently in progress? <code>$http</code> service has one neat property called <code>pendingRequests</code> which is array of <code>config</code> objects for request that were sent. So matching duplicated requests is just a matter of searching through <code>pendingRequests</code> for request with identical <code>requestId</code> as one in our request we are about to send. So here is first part of implementation:</p>

<figure class='code'><figcaption><span>first implementation   of modified service</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">commons</span><span class="p">.</span><span class="nx">uniqueRequestsAwareHttpService</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">uniqueRequestOptionName</span> <span class="o">=</span> <span class="s2">&quot;unique&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">requestIdOptionName</span> <span class="o">=</span> <span class="s1">&#39;requestId&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// should we care about duplicates check</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">checkForDuplicates</span><span class="p">(</span><span class="nx">requestConfig</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">!!</span><span class="nx">requestConfig</span><span class="p">[</span><span class="nx">uniqueRequestOptionName</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// find identical request in pending requests</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">checkIfDuplicated</span><span class="p">(</span><span class="nx">requestConfig</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">duplicated</span> <span class="o">=</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">pendingRequests</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">pendingReqConfig</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">pendingReqConfig</span><span class="p">[</span><span class="nx">requestIdOptionName</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">pendingReqConfig</span><span class="p">[</span><span class="nx">requestIdOptionName</span><span class="p">]</span> <span class="o">===</span> <span class="nx">requestConfig</span><span class="p">[</span><span class="nx">requestIdOptionName</span><span class="p">];</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">duplicated</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">modifiedHttpService</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">requestConfig</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// if we need to check for dups and pending found - return</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">checkForDuplicates</span><span class="p">(</span><span class="nx">requestConfig</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">checkIfDuplicated</span><span class="p">(</span><span class="nx">requestConfig</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// otherwise pass requeust to original $http service</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$http</span><span class="p">(</span><span class="nx">requestConfig</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">modifiedHttpService</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>It works fine if you try it, but has one huge drawback. <code>$http</code> service calls return promises so you can attach to them using <code>then</code> function and wait for them to be either resolved or rejected. Our current implementation is not consistent in return types. In fact it returns nothing when duplicate is detected, but returns regular promise when request is passed to original <code>$http</code>. To fix it we need to construct deferred using <code>$q</code> service as below.</p>

<figure class='code'><figcaption><span>returning promise</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">commons</span><span class="p">.</span><span class="nx">uniqueRequestsAwareHttpService</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">$q</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">DUPLICATED_REQUEST_STATUS_CODE</span> <span class="o">=</span> <span class="mi">499</span><span class="p">;</span> <span class="c1">// I just made it up - nothing special</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">EMPTY_BODY</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">EMPTY_HEADERS</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// previous stuff here</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">buildRejectedRequestPromise</span><span class="p">(</span><span class="nx">requestConfig</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dfd</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// build response for duplicated request</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="nx">EMPTY_BODY</span><span class="p">,</span> <span class="nx">headers</span><span class="o">:</span> <span class="nx">EMPTY_HEADERS</span><span class="p">,</span> <span class="nx">status</span><span class="o">:</span> <span class="nx">DUPLICATED_REQUEST_STATUS_CODE</span><span class="p">,</span> <span class="nx">config</span><span class="o">:</span> <span class="nx">requestConfig</span><span class="p">};</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">&#39;Such request is already in progres, rejecting this one with&#39;</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// reject promise with response above</span>
</span><span class='line'>        <span class="nx">dfd</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">dfd</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">modifiedHttpService</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">requestConfig</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">checkForDuplicates</span><span class="p">(</span><span class="nx">requestConfig</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">checkIfDuplicated</span><span class="p">(</span><span class="nx">requestConfig</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// return rejected promise with response consistent with those from $http calls</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">buildRejectedRequestPromise</span><span class="p">(</span><span class="nx">requestConfig</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$http</span><span class="p">(</span><span class="nx">requestConfig</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">modifiedHttpService</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done, we have fully working implementation. Just one note, it works only for direct <code>$http</code> calls, if you try to fire <code>$http.get</code> or <code>$http.post</code> or even <code>$resource</code> it won&#8217;t work, because those use shortcut calls defined directly on <code>$http</code>. Fix for that would be to define such functions on our modified version of <code>$http</code> service, but I&#8217;ll leave it to you.</p>

<p>And that&#8217;s all. This is how we solved this in <a href="http://codebrag.com">Codebrag</a> without violating DRY (at least I think so). We have fully working decorator implementation that can prevent duplicated requests from sending. It can be configure separately for every <code>$http</code> request group you define in your application. Just add <code>unique</code> and <code>requestId</code> parameters to request config.</p>

<p>I&#8217;m sure there are other methods for doing this kind of stuff. If you know one, let me know about it in comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy stubbing of HTTP requests in AngularJS for backend-less frontend development]]></title>
    <link href="http://mostr.github.com/blog/2013/05/27/easy-stubbing-out-http-in-angularjs-for-backend-less-frontend-development/"/>
    <updated>2013-05-27T23:53:00+02:00</updated>
    <id>http://mostr.github.com/blog/2013/05/27/easy-stubbing-out-http-in-angularjs-for-backend-less-frontend-development</id>
    <content type="html"><![CDATA[<p>Writing single page applications requires HTTP calls to server in order to either get data from or post data to server. In production environment there is real backend system with its own business logic, persistence etc. But what if we could leave all the backend infrastructure aside when in development mode of client part of application? In fact the only thing we are interested in (when working on client app) is particular response for particular request, not if server logic is implemented correctly. Sure, you can implement corresponding request handler on server and return static data for development needs, but there must be a better way to do that. What if we could stub HTTP requests on client side and leave our full-blown backend server aside completely, even without firing it up?</p>

<p>If you write your browser client using (excellent) <a href="http://angularjs.org">AngularJS</a> framework it&#8217;s pretty easy to do that. First of all Angular has all the low level AJAX-related details encapsulated into <code>$http</code> service (or level up - <code>$resource</code> to deal with world the RESTful way), so it means you usually call server like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$http</span><span class="p">({</span><span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/endpoint&#39;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>and it handles all the underlying HTTP magic for you. It simply calls your server&#8217;s <code>/endpoint</code> address and <code>GET</code>s data from it.</p>

<p><a href="http://angularjs.org">AngularJS</a> is very serious on testing and it already has <code>$httpBackend</code> to simulate requests in unit tests etc., so why not use similar approach in development? Angular provides separate module called <code>ngMockE2E</code> dedicated for end-to-end testing which contains fake <code>$http</code> service definition and it turns out it can be easily used outside tests and serve as backend for your development environment. Angular guys recommend to use it the following way (from their documentation):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myAppDev</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myAppDev&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="s1">&#39;ngMockE2E&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nx">myAppDev</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$httpBackend</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// define responses for requests here</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all fine, but there is no easy way to make it work out of the box without tweaking existing code every time you want to enable this stub mode. You still need to modify your <code>ng-app</code> attribute in your <code>index.html</code> file and point it to <code>myAppDev</code> module to be able to bootstrap your application with stubbed backend.</p>

<p>Although there is a way you can make use of this fake backend without modifying your app bootstrap HTML code and this is what we did in <a href="http://codebrag.com">Codebrag</a>. We needed a way to fire up application without backend infrastructure e.g. to let our HTML/CSS wizard to work on application files without setting up all this server stuff etc. or just to work on some frontend without having backend done. So how we did that? That&#8217;s quick&#8217;n&#8217;easy!</p>

<figure class='code'><figcaption><span>httpBackendStub.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// &#39;codebrag&#39; is our main application module</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;codebrag&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$provide</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$provide</span><span class="p">.</span><span class="nx">decorator</span><span class="p">(</span><span class="s1">&#39;$httpBackend&#39;</span><span class="p">,</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">mock</span><span class="p">.</span><span class="nx">e2e</span><span class="p">.</span><span class="nx">$httpBackendDecorator</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$httpBackend</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// define responses for requests here as usual</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Angular lets you define multiple <code>run</code> and <code>config</code> functions for modules so we could use that ability to provide additional configuration and setup of our fake backend besides our regular configuration of <code>codebrag</code> module. Include this file (as well as <code>angular-mocks.js</code> from Angular guys) in your <code>index.html</code> and it will magically make your application using with stubbed backend.</p>

<p>To make it even less obtrusive (at this stage you still need to add/remove this file reference in order to enable/disable stubbed backend) we did the following:</p>

<figure class='code'><figcaption><span>httpBackendStub.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">ng</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\?nobackend$/</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span> <span class="c1">// do nothing special - this app is not gonna use stubbed backend</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;======== ACHTUNG!!! USING STUBBED BACKEND ========&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">initializeStubbedBackend</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">initializeStubbedBackend</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// &#39;codebrag&#39; is our main application module</span>
</span><span class='line'>        <span class="nx">ng</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;codebrag&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$provide</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$provide</span><span class="p">.</span><span class="nx">decorator</span><span class="p">(</span><span class="s1">&#39;$httpBackend&#39;</span><span class="p">,</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">mock</span><span class="p">.</span><span class="nx">e2e</span><span class="p">.</span><span class="nx">$httpBackendDecorator</span><span class="p">);</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$httpBackend</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// define responses for requests here as usual</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we used some Angular internals to tweak our main module configuration by providing stubbed <code>$http</code> service version. Now you can have <code>httpBackendStub.js</code> file included in your index.html every time when in development (no matter if you want to talk to real server via real HTTP calls or stubbed one) and it&#8217;s just a matter of passing <code>?nobackend</code> parameter when hitting application in your browser&#8217;s address bar when you want to access with &#8220;no server&#8221; mode.</p>

<p>The only thing is you still need to serve your files (html partials, css styles and js scripts) via HTTP server somehow. In production one option is that it may be served from your backend server. Now when you don&#8217;t have backend server up and running you still need simple web server to give you access to your files (due to CORS and security policies in browsers you may not do http requests from <code>file://</code> protocol). But fear not - this is as simple as firing up for example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python -m SimpleHTTPServer
</span></code></pre></td></tr></table></div></figure>


<p>in the main directory of your application&#8217;s client part. So for example if you are java-being you probably have your web application client stuff in <code>src/main/webapp</code> directory. Just go there and fire the command below. It defaults to port 8000 so you can reach your app under <a href="http://localhost:8080/app_url_here">http://localhost:8080/app_url_here</a>. See? No full blown backend server there and you are still able to work on client side!</p>

<p>One final note - when preparing prod. distribution you can safely exclude this file containing fake backend configuration and definition from the process you use (concat/min/whatever) and your app will happily talk to real server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous, fast Rspec tests with JRuby on Vagrant]]></title>
    <link href="http://mostr.github.com/blog/2013/04/07/jruby-rspec-vagrant/"/>
    <updated>2013-04-07T11:12:00+02:00</updated>
    <id>http://mostr.github.com/blog/2013/04/07/jruby-rspec-vagrant</id>
    <content type="html"><![CDATA[<p>I don&#8217;t code in ruby on daily basis but from time to time I jump into ruby world. Most of the times I have my ruby playground on dedicated <a href="http://www.vagrantup.com">Vagrant</a> virtual machine, so I can play with different setups, gems, packages and even if I break something it&#8217;s just a matter of few Vagrant commands to get my environment back, in stable state. I use JRuby, but playing with JRuby has few well known drawbacks, one of which is startup time. It is even more important when continuous testing, TDD and quick feedback loop is what you believe in and use it all the day while coding. I prefer RSpec as my testing tool of choice in ruby world and there are few solutions to run tests on every change in files. One of them is <a href="https://github.com/guard/guard">Guard</a>. In its RSpec incarnation it runs <code>rspec</code> command every time file is changed. It works excellent on MRI, but is terribly slow on JRuby due to the fact every run of <code>rspec</code> command requires new java process to start (JVM needs to load all its stuff). There is a solution for that (see note at the end of this post), but the core thing with Guard is that it doesn`t play well with Vagrant.</p>

<p>When using Vagrant as a development environment I often have a project folder shared between my localhost and Vagrant VM so that I can write code locally using e.g. SublimeText and run this code as well as its tests on Vagrant machine. The issue with Guard is that it doesn&#8217;t handle the case when file is being changed remotely. So it looks Guard isn&#8217;t well suited for setups like mine. Looking for a solution I found another tool called <a href="https://github.com/mynyml/watchr">Watchr</a>. This is quite old gem with no active development (as far as I can see on Github), but does what I need - reacts on remote file changes. The simplest Watchr config to run RSpec may look as follows (for typical ruby project structure with <code>lib</code> and <code>spec</code> folders):</p>

<figure class='code'><figcaption><span>.watchr</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">run_spec</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Running specs: </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="sb">`rspec -c </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">watch</span><span class="p">(</span><span class="s2">&quot;spec/.*/*_spec.rb&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">match</span><span class="o">|</span>
</span><span class='line'>  <span class="n">run_spec</span> <span class="n">match</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">watch</span><span class="p">(</span><span class="s2">&quot;app/(.*/.*).rb&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">match</span><span class="o">|</span>
</span><span class='line'>  <span class="n">run_spec</span> <span class="sx">%{spec/</span><span class="si">#{</span><span class="n">match</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="sx">_spec.rb}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What it does is: it runs <code>rspec</code> on given spec file when either spec file or corresponding lib file was changed. To run it type <code>watchr .watchr</code>. It detects every file change even the remote one but still has this one huge drawback - runs <code>rspec</code> command every time which is terribly slow (JVM startup, ya remember?). It turns out that separate ruby doesn&#8217;t need to be run every time to run RSpec. RSpec can be run from within existing ruby runtime via <code>RSpec::Core::Runner.run([file], STDERR, STDOUT)</code>. So it means that if Watchr runs its own JRuby runtime to watch for changes, this runtime can be reused to fire up RSpec internally. Let&#8217;s change Watchr config file definition to look as follows:</p>

<figure class='code'><figcaption><span>.watchr</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./watchr_spec_runner&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">watch</span><span class="p">(</span><span class="s2">&quot;spec/(.*/*)_spec.rb&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">match</span><span class="o">|</span>
</span><span class='line'>  <span class="no">WatchrSpecRunner</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">for_spec_file</span> <span class="n">match</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">watch</span><span class="p">(</span><span class="s2">&quot;lib/(.*/.*).rb&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">match</span><span class="o">|</span>
</span><span class='line'>  <span class="no">WatchrSpecRunner</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">for_lib_file</span> <span class="n">match</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>watchr_spec_runner</code> is my tiny class as below:</p>

<figure class='code'><figcaption><span>watchr_spec_runner.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WatchrSpecRunner</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">for_spec_file</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">run_spec</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">for_lib_file</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">load_lib_file</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">run_spec</span><span class="p">(</span><span class="n">to_spec</span><span class="p">(</span><span class="n">file</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@spec_dir</span> <span class="o">=</span> <span class="s1">&#39;spec&#39;</span>
</span><span class='line'>    <span class="vi">@lib_dir</span> <span class="o">=</span> <span class="s1">&#39;lib&#39;</span>
</span><span class='line'>    <span class="vi">@specs_suffix</span> <span class="o">=</span> <span class="s1">&#39;_spec.rb&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_spec</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@spec_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">file</span><span class="si">}#{</span><span class="vi">@specs_suffix</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">load_lib_file</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">load</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@lib_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">.rb&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run_spec</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;rspec&#39;</span>
</span><span class='line'>    <span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="n">color_enabled</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="n">tty</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="o">::</span><span class="no">RSpec</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">Runner</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="o">[</span><span class="n">file</span><span class="o">]</span><span class="p">,</span> <span class="no">STDERR</span><span class="p">,</span> <span class="no">STDOUT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>      <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>      <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Backtrace:</span><span class="se">\n\t</span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n\t</span><span class="s2">&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now Watchr startup takes some time (as usual), but then running specs is blazingly fast. Of course provided Watchr configuration together with my <code>WatchrSpecRunner</code> class are dead simple and have just very, very basic funcionality - run spec when file changes. There is a lot more to do e.g. run all specs when going back to green from red phase, etc.</p>

<p>So this is what I came up with when talking about JRuby Vagrant and continuous RSpec run. For complete local development with JRuby I&#8217;d probably use Guard as it is more mature, has more features, is actively developed and easier to use.</p>

<p><strong>Guard with RSpec for JRuby note:</strong></p>

<p>There is an implementation of Guard-rspec for JRuby <a href="https://github.com/jkutner/guard-jruby-rspec">here</a>, but currently available version has an quite annoying issue - when you change spec file it &#8220;magically&#8221; doubles specs number run. <a href="https://github.com/jkutner/guard-jruby-rspec/pull/22">My pull-request</a> with fix for that was already merged, so you may want to use latest version from Github until it is released.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cookbook dependencies in Chef Solo with Librarian]]></title>
    <link href="http://mostr.github.com/blog/2013/02/20/librarian/"/>
    <updated>2013-02-20T10:12:00+01:00</updated>
    <id>http://mostr.github.com/blog/2013/02/20/librarian</id>
    <content type="html"><![CDATA[<p><em>Disclaimer: I&#8217;m just chef-solo newbie and those are my findings after few hours with chef</em></p>

<p>When cooking something non-trivial with chef-solo your cookbooks (or community cookbooks you use) may depend on other cookbooks. For example to use <a href="https://github.com/edelight/chef-mongodb">this</a> <code>mongodb</code> cookbook you need <code>apt</code> and <code>yum</code> cookbooks too. So you need to be sure you have all the dependencies available in place so chef can reach them. It may be real PITA and you know that if you are e.g. java developer and had a chance to work without dependencies management tool and you had to figure out and download all the dependendent jars by hand. But fear not, fortunately &#8220;there is a gem for that&#8221; that helps you manage cookbooks&#8217; dependencies. It is called <a href="https://github.com/applicationsonline/librarian">Librarian</a> and is works like <a href="http://gembundler.com/">Bundler</a> for ruby projects, or like <a href="http://maven.apache.org/">Maven</a> (its dependencies management part) for java projects. It uses its own <code>Cheffile</code> to declare required dependencies. For example to use <code>mongodb</code> cookbook mentioned above you may write the following:</p>

<figure class='code'><figcaption><span>Cheffile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">site</span> <span class="s1">&#39;http://community.opscode.com/api/v1&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;mongodb&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">edelight</span><span class="o">/</span><span class="n">chef</span><span class="o">-</span><span class="n">mongodb</span><span class="o">.</span><span class="n">git</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now run <code>librarian-chef install</code> and it will download all the declared cookbooks together with their dependencies to your cookbooks location. In case of the <code>mongodb</code> cookbook it will download this <code>mongodb</code> cookbook itself and <code>apt</code> and <code>yum</code> cookbooks as well.</p>

<p>I recommend you to take a look at <a href="https://github.com/applicationsonline/librarian">Librarian</a> if you haven&#8217;t used it before as well as get familiar with this whole topic of automated provisioning (no matter what tool you will choose, it&#8217;s worth spending some time to learn it). I enjoyed it all a lot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick glance at JAX-RS 2.0 Client API]]></title>
    <link href="http://mostr.github.com/blog/2013/01/25/jaxrs/"/>
    <updated>2013-01-25T08:44:00+01:00</updated>
    <id>http://mostr.github.com/blog/2013/01/25/jaxrs</id>
    <content type="html"><![CDATA[<p>JAX-RS 2.0 is going to be included in Java EE 7, so I thought I&#8217;d play with it a bit to get familiar with what&#8217;s new there. One thing that is going to be standarized in specification (JSR-399) is Client API.
Up until now to consume REST or semi-REST (just JSON or XML) web services you could use some non-standarized API of Jersey, CXF, RESTEasy etc or (heaven forbid) roll your own stuff. In this post I&#8217;d like to show you how easy it is to consume RESTful services using this standarized API.</p>

<p>First of all, be aware that this API is still in non-final version (currently in Public Review). There are also some inconsistencies between what specification says and what is currently implemented in e.g. reference implementation from Jersey and RESTEasy.</p>

<p>So to begin with I created maven project with only those two dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- well, reference implementation --&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.glassfish.jersey.bundles<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>jax-rs-ri<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.0-m10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="c">&lt;!-- jackson dependency as we are going to consume JSON responses --&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.codehaus.jackson<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>jackson-jaxrs<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.9.9<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s play with Twitter search for this example. As we don&#8217;t want to parse response JSON by hand, I&#8217;m gonna create the following data structure to let Jackson transform JSON response to. It is very simple class with all-stuff-public for ease of use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@JsonIgnoreProperties</span><span class="o">(</span><span class="n">ignoreUnknown</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">TwitterSearchResults</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Tweet</span><span class="o">&gt;</span> <span class="n">results</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@JsonIgnoreProperties</span><span class="o">(</span><span class="n">ignoreUnknown</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Tweet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">&quot;from_user&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="n">user</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="n">text</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So how does JAX-RS 2.0 Client API call look like? Actually it&#8217;s pretty simple, just fire the code below and it will give you <code>TwitterSearchResults</code> object back.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Client</span> <span class="n">client</span> <span class="o">=</span> <span class="n">ClientFactory</span><span class="o">.</span><span class="na">newClient</span><span class="o">();</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="na">configuration</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="n">JacksonJsonProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">TwitterSearchResults</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span>
</span><span class='line'>      <span class="o">.</span><span class="na">target</span><span class="o">(</span><span class="s">&quot;http://search.twitter.com/search.json&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">queryParam</span><span class="o">(</span><span class="s">&quot;q&quot;</span><span class="o">,</span> <span class="s">&quot;jaxrs&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">request</span><span class="o">(</span><span class="s">&quot;application/json&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">TwitterSearchResults</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the simplest form you can use, but there is more stuff to make it even better.
It is important to keep in mind that creating <code>Client</code> instance is heavyweight and expensive process, so it is advised to keep configured instance of <code>Client</code> around.
As you can see <code>Client</code> can be configured before use by registering <code>Providers</code>, <code>Filters</code> and <code>Features</code>. Here I&#8217;m just registering one provider, <code>JacksonJsonProvider</code> but there may be any number of providers registered. In that case, when client is going to be heavily configured via registering providers and setting some properties it may be better to use <code>Feature</code> instead. So what this <code>Feature</code> is?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">JsonParsingFeature</span> <span class="kd">implements</span> <span class="n">Feature</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">configure</span><span class="o">(</span><span class="n">Configurable</span> <span class="n">configurable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">configurable</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">JacksonJsonProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>This is an implementation of <code>Feature</code> interface that gets <code>Configurable</code> and can play with it to register/unregister providers, set properties etc. In current version of specification it is said that <code>Feature</code> must implement <code>enable</code> and <code>disable</code> methods but there is no such thing in both RI and RESTEasy beta implementations. Moreover specification says there should be <code>enableFeature</code> method to include given feature, but in RI it turns out there is just <code>register</code> method instead and in current RESTEasy implementation there is no way to register feature.
So with this tiny feature implemented we can replace registration of <code>JacksonJsonProvider</code> with registration of <code>JsonParsingFeature</code>. Not a big deal, but imagine heavily customized client - you can split configuration into features and enable/disable them with just one line.</p>

<p><code>Client</code> interface is nice example of fluent interfaces where you can chain methods to get desired result. But it still may seem too low level for some of you, right? Can we encapsulate this client&#8217;s operation and expose even simpler API? Sure we can, with little help of <code>Invocation</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// hide all the low-level details from caller</span>
</span><span class='line'><span class="n">Invocation</span> <span class="n">invocation</span> <span class="o">=</span> <span class="n">client</span>
</span><span class='line'>      <span class="o">.</span><span class="na">target</span><span class="o">(</span><span class="s">&quot;http://search.twitter.com/search.json&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">queryParam</span><span class="o">(</span><span class="s">&quot;q&quot;</span><span class="o">,</span> <span class="s">&quot;jaxrs&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">request</span><span class="o">(</span><span class="s">&quot;application/json&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">buildGet</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// simply use invocation</span>
</span><span class='line'><span class="n">TwitterSearchResults</span> <span class="n">response</span> <span class="o">=</span> <span class="n">invocation</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">TwitterSearchResults</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that&#8217;s the basic usage of new JAX-RS 2.0 API. There is more things to cover like registering <code>Filters</code>, creating <code>WebTargets</code> - request templates (with <code>{param}</code> tokens) that can be replaced dynamically. Also <code>async()</code> can be used to make asynchronous request and get <code>Future</code> instance back for later evaluation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use functions (IIFE) to define AngularJS constants and values]]></title>
    <link href="http://mostr.github.com/blog/2012/12/23/angular-better-constant-values/"/>
    <updated>2012-12-23T13:23:00+01:00</updated>
    <id>http://mostr.github.com/blog/2012/12/23/angular-better-constant-values</id>
    <content type="html"><![CDATA[<p>In AngularJS to provide some constant values to your application (e.g. some config values used across modules your app) you can use either <code>value</code> or <code>constant</code> when defining module and get them injected where required, in services, controllers etc.</p>

<p>Basically creating <code>value</code> and <code>constant</code> look as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">application</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'><span class="nx">application</span><span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;fooConstant&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">application</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;barValue&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// inject them and use</span>
</span><span class='line'><span class="nx">application</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;FoobarCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">foobar</span> <span class="o">=</span> <span class="nx">foo</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">bar</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both <code>value</code> and <code>constant</code> values can be also literal objects as below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">application</span><span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="s1">&#39;foobar&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">bar</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>But suppose we&#8217;d like to have set of configuration parameters where one depends on another (e.g. one is build using the other&#8217;s value), but we don&#8217;t want to repeat this value again and again (remember DRY, huh?). For example we could have configuration as below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">protocol</span> <span class="o">=</span> <span class="s1">&#39;http://&#39;</span>
</span><span class='line'><span class="nx">fooService</span> <span class="o">=</span> <span class="nx">protocol</span> <span class="o">+</span> <span class="s1">&#39;fooservice.com&#39;</span>
</span><span class='line'><span class="nx">barService</span> <span class="o">=</span> <span class="nx">protocol</span> <span class="o">+</span> <span class="s1">&#39;barservice.com&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Unfortunately we can&#8217;t do this using javascript object literals as there is no way to reference <code>protocol</code> property of the same object. We could define <code>fooService</code> and <code>barService</code> as functions but we&#8217;d like to have configuration as properties not  functions. Defining separate <code>constant</code> or <code>value</code> for protocol doesn&#8217;t help much as we can&#8217;t get it injected when defining others. Theoretically we could achieve desired result by defining function as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">protocol</span> <span class="o">=</span> <span class="s1">&#39;http://&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fooService</span><span class="o">:</span> <span class="nx">protocol</span> <span class="o">+</span> <span class="s1">&#39;fooservice.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">barService</span><span class="o">:</span> <span class="nx">protocol</span> <span class="o">+</span> <span class="s1">&#39;barservice.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Unfortunately still no luck here because functions are not accepted as values for AngularJS <code>value</code> and <code>constant</code> definitions.  But fear not. Immediately Invoked Function Expression (IIFE) to the rescue. Such expression allows you to define function and invoke it immediately, so this whole expression evaluates to the return value of this function. So we can grab the function definition above and make use of it as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">application</span><span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="s1">&#39;servicesConfig&#39;</span><span class="p">,</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">protocol</span> <span class="o">=</span> <span class="s1">&#39;http://&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fooService</span><span class="o">:</span> <span class="nx">protocol</span> <span class="o">+</span> <span class="s1">&#39;fooservice.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">barService</span><span class="o">:</span> <span class="nx">protocol</span> <span class="o">+</span> <span class="s1">&#39;barservice.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doing this we can reference <code>protocol</code> definition without duplicating its value while still being able to define full-blown AngularJS <code>constant</code> or <code>value</code> with only properties.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Day of Code Retreat 2012]]></title>
    <link href="http://mostr.github.com/blog/2012/12/10/global-day-of-code-retreat-12/"/>
    <updated>2012-12-10T22:35:12+01:00</updated>
    <id>http://mostr.github.com/blog/2012/12/10/global-day-of-code-retreat-12</id>
    <content type="html"><![CDATA[<p>This year at Global Day of Code Retreat event in Lodz we had 57 developers. It was big surprise for us, organizators as we were expecting that not all registered people would be ready to get up early on Saturday and devote whole day to coding with others. As far as I know we were one of the biggest Code Retreats that day :) It was my first Code Retreat as facilitator and I must say, being facilitator is much more exhaustive than being regular attendee. I was completely tired after that whole day but if I had to facilitate next Code Retreat on the following Sunday I&#8217; definitely do that. It was awesome day.</p>

<p>So what it was all about? We decided to start officially at 8:30am with breakfast and coffee first. We also hanged out with Code Retreaters in Australia to say hello. Then Pawel Wlodarski introduced the whole Code Retreat idea and explained the problem of the day &#8220;Game of Life&#8221;. After all the introductions and seeing Corey&#8217;s welcome video we fired up first &#8220;no constraints&#8221; session. Actually there were some not explicit constraints. We asked all the participants to treat tests seriously, write them, write tests-first and treat tests as regular code. Some of them had heard about TDD before but there were a few who had never written any serious tests. This session was devoted to getting familiar with problem, with tests-first and pair programming ideas (for those who had never experienced that before). Because we had about 60 participants we decided to divide them into 3 groups for retrospection (as there were three of us, facilitators). I can say it was a great choice as it was much easier to control and drive discussion in group od 20 people than 60 people. The only retrospection with the group as a whole was the one after last session. We had bunch of session constraints prepared and were choosing next session&#8217;s topic on the go basing our decisions on how the previous session was going. Remaining sessions had following constraints:</p>

<ul>
<li>Ping-Pong TDD and keeping methods short (max 5 lines)</li>
<li>One indentation level per method (one abstraction per method)</li>
<li>No mouse session and wrapping primitives into domain objects</li>
<li>Choose what you want from Object Callisthenics by Jeff Bay</li>
<li>Code Swap</li>
</ul>


<p>A lot of people found this Ping-pong TDD session useful, as everyone could be automatically equally involved in the process. They also experienced power of &#8220;extract method&#8221; refactoring when reaching max lines limit. For the fourth session (no mouse) we had paper copies of key shortcut cheat sheets prepared for several IDEs and it turned out a lot of pairs found it really useful. I saw a lot of people being interested with all the Object Callisthenics constraints and I was asked several times what&#8217;s that and where to get more info about that. At the end of the last session we asked attendees not to delete their code, which was quite surprising as they were used to do that on every session&#8217;s end. After the last session and retrospection we had short video conf with guys from Ecuador. And it was basically the end of our GDCR this year.</p>

<p>Judging from feedback forms we mailed to participants next day the event was really great. There was a number of things mentioned in feedback form or during retrospections that they learned during that day. These are things as simple as &#8220;unit testing&#8221;, &#8220;key shortcuts&#8221; but also like &#8220;TDD&#8221;, &#8220;comparing two different approaches to software development: outside-in and inside-out&#8221; and so on. We also received a lot of comments and improvements proposals. Although rules of that day were stated and explained at the beginning, some of the attendees were not happy they could not finish the problem and had to start everything from scratch every session. Now I think we could choose constraints better to force attendees to explore different approach in each session. That way they wouldn&#8217;t end up with repeating the same code every time what was little boring. Clearly there is a lot of things to improve before next GDCR but I personally feel it was really good day and I&#8217;m proud I could be a part of it and facilitate such awesome event. Even if I wasn&#8217;t coding that day I can say I&#8217;ve learnt a lot.</p>

<p>I&#8217;d like to thank to all participants here in Lodz and over the world for making that day really special and encourage you, dear reader to consider joining next time expecially if you haven&#8217;t had a chance to be at Code Retreat before. We hope not to wait until next GDCR and run something local during upcoming year, maybe in Code Retreat way too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple jQuery sortables in AngularJS]]></title>
    <link href="http://mostr.github.com/blog/2012/12/03/sortable-in-angularjs/"/>
    <updated>2012-12-03T10:46:00+01:00</updated>
    <id>http://mostr.github.com/blog/2012/12/03/sortable-in-angularjs</id>
    <content type="html"><![CDATA[<p>Recently for one of my side-projects I was looking for solution that&#8217;d allow user to drag elements from one logical set to another and to reorder them. I knew there was <a href="http://jqueryui.com/sortable/">sortable plugin from jQuery UI </a> that would do the trick. As my application is powered by awesome <a href="http://angularjs.org/">AngularJS</a> I was searching for something similar in AngularJS world (possibly kind of sortable wrapper). It turns out that there is such extension in <a href="https://github.com/angular-ui/angular-ui">angular-ui</a> project that wraps jQuery sortable plugin in AngularJS directive. After several quick&amp;dirty shots and source code inspection I noticed that it has functionality limited to only handling single collection. I could sort/reorder items within one set, but couldn&#8217;t link multiple sets together.</p>

<h2>Here comes ui-multi-sortable directive</h2>

<p>So I decided to try to create something that satisfies those requirements. As a result I came up with <code>ui-multi-sortable</code> directive that you can find <a href="https://github.com/mostr/angular-ui-multi-sortable">here</a>. It is partially based on angular-ui directive mentioned above. I&#8217;ll describe how to use this new directive and what were problems I faced during implementation.</p>

<p>Let&#8217;s start with model definition for this example. Suppose we are building simple taskboard that has two columns: &#8220;To do&#8221; and &#8220;Done&#8221;. Our data model (defined in AngularJS controller) would look like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">todo</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;todo 1&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;todo 2&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;todo 3&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;todo 4&#39;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">done</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;done 1&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;done 2&#39;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want our users to be able to grab items from &#8220;To do&#8221; column and move them to &#8220;Done&#8221; column. Obviously we want our underlying model to be in sync with what user does.
Let&#8217;s define our UI part as simple two-columns layout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-controller=</span><span class="s">&quot;TaskboardController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ui-multi-sortable</span> <span class="na">ng-model=</span><span class="s">&quot;items&quot;</span> <span class="na">model-subset=</span><span class="s">&quot;todo&quot;</span> <span class="na">class=</span><span class="s">&quot;column&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in items.todo&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ui-multi-sortable</span> <span class="na">ng-model=</span><span class="s">&quot;items&quot;</span> <span class="na">model-subset=</span><span class="s">&quot;done&quot;</span> <span class="na">class=</span><span class="s">&quot;column&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in items.done&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see there is <code>ui-multi-sortable</code> directive used instead of <code>ui-sortable</code> one available in angular-ui. As our model isn&#8217;t just plain array of objects (it&#8217;s object containing several arrays of items instead) we need to tell Angular which subset of items should be linked with which sortable element. That&#8217;s what additional <code>model-subset</code> attribute does. It is simply defined as key name under model root. Here <code>items</code> is model root and <code>todo</code> is what contains array of elements to be used in first column.</p>

<p>For each sortable element we need to explicitly tell jQuery what are the others sortables we want to link with. In this case we&#8217;d like to have all elements with class <code>column</code> to be used together. This may be done by providing <code>ui-options</code> attribute for every single column as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>ui-options=&quot;{connectWith: &#39;.column&#39;}&quot;
</span></code></pre></td></tr></table></div></figure>


<p>This is set of options that are passed to underlying jQuery plugin. For more information and available options see jQuery UI sortable API. But that&#8217;s not &#8220;DRY&#8221; enough, right? Instead we can provide global options for sortable in AngularJS like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;ui.config&#39;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">value</span><span class="p">(</span><span class="s1">&#39;ui.config&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sortable</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">connectWith</span><span class="o">:</span> <span class="s1">&#39;.column&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s all. You can now move items between those two columns and your underlying model will always stay in sync with UI changes.</p>

<h2>What is the magic behind all that?</h2>

<p>Regarding implementation, the key is in correct underlying model manipulation (either just reorder items if in single sortable, or move items between different sortables). All that is not too difficult, just clever usage of <code>splice</code> on array. The trick is how to hook up all this into right jQuery sortable callbacks sequence.</p>

<p>Standard <code>ui-sortable</code> directive defines <code>start</code> callback that grabs original position of dragged item and <code>update</code> callback to execute actual model manipulation. Unfortunately in case of several related sortables this approach fails because when dragging item between different sortables sequence of events emitted is as follows:</p>

<ul>
<li><code>start</code> when sorting starts</li>
<li><code>update</code> on original sortable</li>
<li><code>remove</code> remove item from original sortable</li>
<li><code>receive</code> put item being moved in target sortable</li>
<li><code>update</code> on target sortable</li>
<li><code>stop</code> when sorting is done</li>
</ul>


<p>The problem here is in two <code>update</code> callbacks being fired.
First one fired on source sortable and looks as if there was operation of reordering items inside this sortable only (which is clearly not true here as we don&#8217;t want to mess up with model this way). There is no way to get data about target sortable here. The second one is on target sortable, but this one on the other side knows nothing about source sortable and both source and target positions of item. I&#8217;m not sure if this was done that way intentionally, as I can&#8217;t imagine good use case for it. All in all I could see no good way of using <code>update</code> for related sortables. So I decided to split that as below:</p>

<ul>
<li>use <code>stop</code> to change model when sorting happens within one sortable. Here it is fired only once, on source sortable and has all the data I need just for sorting elements.</li>
<li>use <code>receive</code> for cross-sortable interactions. It is fired on target sortable and also has all the data to update model.</li>
</ul>


<p>Finally I came up with <code>ModelSynchronizer</code> object which handles all the model updates and encapsulates data required for this update. This is the only place where all the heavy lifting happens. The directive itself only defines set of callbacks which simply invoke corresponding operations on instances of <code>ModelSynchronizer</code> + additional callbacks defined by user.</p>

<p>In case you find it useful, go and grab all the code from <a href="https://github.com/mostr/angular-ui-multi-sortable">here</a>. Pull requests are also welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My notes from first BYOP meetup in Lodz]]></title>
    <link href="http://mostr.github.com/blog/2012/11/08/first-byop-in-lodz/"/>
    <updated>2012-11-08T11:56:00+01:00</updated>
    <id>http://mostr.github.com/blog/2012/11/08/first-byop-in-lodz</id>
    <content type="html"><![CDATA[<p>First of all what the heck is BYOP? This acronym resolves to <strong>Bring Your Own Problem</strong> and is polish local agile initiative of folks from Code Sprinters. This is set of recurring meetups (they are free of charge) for agile enthusiasts (or those who just want to learn something about it) in different polish cities. Attendees are welcome to bring their own problems they have in organizations, ask questions, exchange ideas or just listen for others agile practitioners. You can read more at <a href="http://byop.pl">byop.pl</a> (site in polish only).</p>

<p>It was very first BYOP meetup organized in Lodz and I was positively surprised with number of attendees. There were 19 of us from different IT companies based in Lodz. Most of the attendees were actively discussing over the whole meeting, but I could spot one or two folks who seemed to be really bored. The whole meeting finished after more than 2,5 hours of hot discussion, what was also a positive surprise for me. I was expecting that we would run out of topics, ideas and people willing to discuss quickly.</p>

<p>So it all started from discussion about team appraisals, bonuses, motivation etc in terms of both development teams as a whole and individual developers and delivering business values. Several real-life examples of appraisal processes and their strenghts and weaknesses in context of whole teams were provided as well as ideas for improvements of current processes. The result of discussion was that it was better to conduct such appraisal processes on the whole team level instead of single developers then tweak the process in exceptional situations and keep away from HR excel forms, points and strict grades. It also turned out that money were not the biggest motivation and introducing transparency within organization might make motivation-related things even better. There was an example of IT company from Bulgaria, where every aspect of their business, from salaries through contracts negotiations and prices to company profits was completely transparent.</p>

<p>Next discussion topic I noticed was about communication and soft skills in developers world. As one said</p>

<blockquote><p>Developers should learn how brain works before they learn how SVN works</p></blockquote>

<p>It is really important to know how to communicate with others and to encourage so called <strong>osmotic communication</strong> within the team, where information is widely accessible and just flows in the air in the team&#8217;s room. So called <strong>information radiators</strong> are one of the most popular things supporting such model in agile development world. As a part of constant improvement of teams and their work, giving and receiving valuable feedback to others is necessary. It is really hard to do that and some people are simply not brave enough to do that. But as real life examples show after several feedback rounds (occuring every few weeks/months) it gets better and teams can greatly benefit from those feedback sessions. Team members can even stop worrying about giving/receiving immediate feedback. I advise you to read those blog posts of Pawel Brodzinski about feedback: <a href="http://blog.brodzinski.com/2012/08/feedback-culture.html">Feedback Culture</a>, <a href="http://blog.brodzinski.com/2012/04/instant-feedback-culture.html">Instant Feedback</a> and <a href="http://blog.brodzinski.com/2012/07/on-feedback.html">On Feedback</a>.</p>

<p>The next big discussion topic was about role of Project Managers in agile teams. Not all PMs are ok with giving more freedom (and loosing own control) to their teams and they still try to micro-manage to keep this illusion of control. Only small numbers of them can fully understand that their new role during and after agile transformation is to serve the team, to support team&#8217;s desicions and to push organization in order to give the team what they need. Good Project Manager should be as close to his team as possible, should experience what&#8217;s happening there. In Lean Manufacturing there is something called <strong>Gemba Walk</strong> which is exactly that. Question: <strong>Does your PM sit together with his team, in the same room?</strong> If not, he is doing it wrong. There was a cite from Roy Osherove who defined three phases of team evolution, where Project Manager (or some kind of leader in general) was required only in first two phases, to manage, show directions and keep things running. His role in last, third phase is just as mentioned above - to help the team do its job, not manage. You can find the full article about it <a href="http://5whys.com/blog/the-3-maturity-stages-of-a-software-team-and-how-scrum-fails.html">here</a>. For some teams where Project Manager can&#8217;t play well with new model of agile communication and collaboration, teams are forced to build up alternative communication channels bypassing Project Manager and taking over his role (at least partially).</p>

<p>Those are the biggest topics I noticed during the discussion. Besides that there were also following things discussed:</p>

<ul>
<li>There is no point in teams comparison, teams are different and interactions between team members make it unique</li>
<li>How to build team: let people create it or just designate people to teams? Which teams perform better?</li>
<li>Agility in government or other &#8220;formality-heavy&#8221; institutions</li>
<li>Agile as just only another buzzword</li>
<li>Agile transformation is not possible without agile-addicted freaks who can push this process forward</li>
</ul>


<p>To sum up, I found this meetup worth every single minute I spent there. It is always good to hear and learn from others, and to be able to exchange ideas and have background for applying them. The good news is that next BYOP in Lodz is gonna be on <strong>January&nbsp;16,&nbsp;2013</strong>. I really invite you to come and bring your own problem! I hope we can start building kind of active agile community in Lodz. Why not?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTEasy resources are CDI-aware in JBoss AS by default]]></title>
    <link href="http://mostr.github.com/blog/2012/10/31/resteasy-cdi-integration/"/>
    <updated>2012-10-31T13:29:00+01:00</updated>
    <id>http://mostr.github.com/blog/2012/10/31/resteasy-cdi-integration</id>
    <content type="html"><![CDATA[<p>JAX-RS and CDI have slightly different scopes so that by default there is no way to mix them and use CDI bean as JAX-RS resource, so <code>@Inject</code> and other CDI magic tools are not available. To get it working you normally need to annotate your class with <code>@RequestScoped</code> like below</p>

<figure class='code'><figcaption><span>BookResource.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/book&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@RequestScoped</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookResource</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// this will work only when @RequestScoped is present on a class level</span>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MyService</span> <span class="n">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@GET</span>
</span><span class='line'>    <span class="nd">@Produces</span><span class="o">(</span><span class="s">&quot;text/plain&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">doSomething</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So every time you create endpoint you need to write that extra line to switch this CDI magic on.
Recently when implementing I forgot to put this <code>@RequestScoped</code> thing on my class and guess what? It actually worked fine! I spotted lack of that annotation accidentally some time later when I had all my tests passing and the whole feature working correctly.</p>

<h2>JBoss extras to the rescue</h2>

<p>So I started digging deeper into that. I tried it on two 7.x versions of JBoss AS and on Glassfish 3.1.2.2. It turned out that on Glassfish there is <code>NullPointerException</code> when accessing injected field. So this is what expected. But on both JBoss servers it was all fine with no exception thrown and with work done.</p>

<p>It turns out that JBoss has its own extra module called <code>resteasy-cdi</code> for integration of RESTEasy and CDI that you can read about <a href="http://docs.jboss.org/resteasy/2.0.0.GA/userguide/html/CDI.html">here</a>. TL;DR (from the doc):</p>

<blockquote><p>The resteasy-cdi module is a bridge that allows RESTEasy to work with class instances obtained from the CDI container.
During a web service invocation, resteasy-cdi asks the CDI container for the managed instance of a JAX-RS component. Then, this instance is passed to RESTEasy (&#8230;)
As a result, CDI services like injection, lifecycle management, events, decoration and interceptor bindings can be used in JAX-RS components.</p></blockquote>

<p>This is a tiny trick that can save you from writing some boilerplate code. It is actually only one line, but shouldn&#8217;t we apply DRY where possible? Just remember, this is something extra from JBoss and is available only when using RESTEasy with CDI, and that&#8217;s why Glassfish can&#8217;t do that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Arquillian tests with Maven dependencies in IntelliJ Idea]]></title>
    <link href="http://mostr.github.com/blog/2012/10/24/arquillian-tests-with-maven-deps-intellij/"/>
    <updated>2012-10-24T09:01:00+02:00</updated>
    <id>http://mostr.github.com/blog/2012/10/24/arquillian-tests-with-maven-deps-intellij</id>
    <content type="html"><![CDATA[<p>Arquillian is a big thing. For me it is a revolution in in-container testing. In real world scenarios it is quite common that your JEE components use some libraries, frameworks or other utility classes provided in thirdparty archives. When building project with maven you can make use of <code>pom.xml</code> descriptor and avoid giant amounts of boilerplate code (adding classes and packages of thirdparty libs by hand). I won&#8217;t dive into details how you can set it up, but the idea is to use <code>MavenDependencyResolver</code> and configure it to read your <code>pom.xml</code>.</p>

<figure class='code'><figcaption><span>Using MavenDependencyResolver</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MavenDependencyResolver</span> <span class="n">resolver</span> <span class="o">=</span> <span class="n">DependencyResolvers</span><span class="o">.</span><span class="na">use</span><span class="o">(</span><span class="n">MavenDependencyResolver</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">resolver</span><span class="o">.</span><span class="na">loadMetadataFromPom</span><span class="o">(</span><span class="s">&quot;pom.xml&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">// use in ShrinkWrap archive</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code above works well when run in Eclipse or in command-line Maven, but surprisingly may fail when run from IntelliJ Idea. It complains that <code>pom.xml</code> file cannot be found and read. Some time ago I switched my IDE from Eclipse to IntelliJ Idea and I&#8217;m still brand new if it comes to its cofiguration tips and tricks. Quick ShrinkWrap debugging session and it turnes out that IntelliJ invokes tests from <strong>project&#8217;s dir</strong> instead of <strong>module&#8217;s dir</strong>. Fortunately I&#8217;ve found a switch for that in IDE.</p>

<h2>There I fixed it</h2>

<p>Go to <strong>Edit Configurations</strong> (under <strong>Run</strong> menu), select <strong>Defaults</strong> branch and then <strong>JUnit</strong>. You can see that <strong>Working directory</strong> is set to project&#8217;s directory. That&#8217;s why <code>pom.xml</code> could not be found in this location. Fortunately it can be changed either to <code>MAVEN_REPOSITORY</code> or to <code>MODULE_DIR</code> and the latter is  exactly what you want. Changing that and saving it in defaults makes the issue above disappear.</p>

<p>Now you can run your tests from IntelliJ even if you have maven dependencies to be included in your <code>@Deployment</code> archive.</p>
]]></content>
  </entry>
  
</feed>
