<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: community | Hi there, I'm Michal]]></title>
  <link href="http://mostr.github.com/blog/categories/community/atom.xml" rel="self"/>
  <link href="http://mostr.github.com/"/>
  <updated>2015-05-21T23:19:44+02:00</updated>
  <id>http://mostr.github.com/</id>
  <author>
    <name><![CDATA[Michal Ostruszka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GeeCON 2014 - my brain-dump from the conference]]></title>
    <link href="http://mostr.github.com/blog/2014/05/18/geecon-2014-braindump/"/>
    <updated>2014-05-18T11:18:00+02:00</updated>
    <id>http://mostr.github.com/blog/2014/05/18/geecon-2014-braindump</id>
    <content type="html"><![CDATA[<p>Last weeks were pretty intensive to me in the context of my professional life. I had a pleasure to speak on <a href="http://4developers.org.pl">4Developers</a> conference, then attend <a href="http://front-trends.com">FrontTrends 2014</a> and finally speak at another awesome <a href="http://2014.geecon.org">GeeCON 2014</a> conference. On both 4Developers and GeeCON I gave the same talk (with slight changes) and you can find slides from that talk here  <a href="https://speakerdeck.com/mostr/building-modern-web-applications-single-responsibility-principle-applied-1">"Building modern web applications - Single Responsibility Principle applied"</a>. At GeeCON all talks were recorded so video should be online some time soon if you would like to watch it. It was also the first conference at which I changed the way I learnt from talks. I used an advice from the article shared by Tomek on twitter:</p>

<blockquote class="twitter-tweet" lang="en"><p>Worth to read while you&#39;re at <a href="https://twitter.com/search?q=%23geecon&amp;src=hash">#geecon</a>: Min / Max Note Taking for Conferences - <a href="http://t.co/L0hIluYeCH">http://t.co/L0hIluYeCH</a></p>&mdash; Tomasz Dziurko (@TomaszDziurko) <a href="https://twitter.com/TomaszDziurko/statuses/466504026004410368">May 14, 2014</a></blockquote>


<script async src="http://mostr.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p></p>

<p>I must say it worked out pretty well. Now when the conference is over I have my paper notes full of  bullet points and comments and I know exactly what ideas I want to apply and which to explore further. From my personal point of view this year GeeCON was one of the best conference events I've ever attended. I'm not only talking about being a speaker, although it was a great honor to me to speak there. Let me briefly summarize it. So here it goes.</p>

<p>At the beginning of first day I was feeling quite unsatisfied with my choices - I didn't enjoy second keynote as much as I expected (I couldn't attend the first one). The same applied to Arun Gupta's talk about getting kids to programming. I was expecting something more than just review of tools available. I was expecting more of his own, hands on experience and more tips &amp; tricks about that topic. So it wasn't the best conference start, wasn't it?</p>

<h2>Go - the language of the cloud</h2>

<p>And then it clicked. I went to Ken Sipe's talk about Go language, remembering his great talk about Spock from previous GeeCON. I had no previous experience with Go and although this session lacked this "language of the cloud" explanation I was delighted with it. Now, Go language is on my short-list of things to try out soon after the conference.</p>

<ul>
<li>Platform native &amp; fast compiler</li>
<li>Mix of pascal, js, scala, java in terms of syntax</li>
<li>Channels for concurrency</li>
<li>One ultimate formatting</li>
<li>Safe pointers</li>
<li>Kind of duck typing</li>
</ul>


<h2>Keep it simple with Scala</h2>

<p>As I haven't written single line of code in Java for last 1,5 year (coding backend side of <a href="http://codebrag.com">Codebrag</a> in Scala and playing with languages other than Java) it was easy shot to go to the talk by my <a href="http://softwaremill.com">SoftwareMill</a> buddy, Adam Warski. In short - excellent session with perfect live coding but... if you had no previous experience in Scala it could be a bit of mind-bending kind of talk.</p>

<ul>
<li>Scala async to write async code more like sync one</li>
<li>Spray.io - instant, simple HTTP API server</li>
<li>Macwire - dependency injection built on macros</li>
<li>Probably mind-blowing talk for Scala newbies</li>
</ul>


<h2>DIY - Usability design for developers</h2>

<p>Next one on my radar was this nice talk about doing UX researches, trying different concepts, tools and techniques. We used to use some of them in <a href="http://codebrag.com">Codebrag</a> so it wasn't completely new to me. As I love working with frontends in web applications I wanted to learn something more about UX and I was pretty satisfied I went to this one.</p>

<ul>
<li>Pen and paper to sketch UI</li>
<li>Iterate!</li>
<li>5-6-8 set up 5 mins timer and sketch 6 to 8 different proposals</li>
<li>User testing - like in Codebrag</li>
<li>Java FX with minimal styles used as prototyping tool?</li>
</ul>


<h2>Project Avatar - server side JS on JVM</h2>

<p>As far as I understand and fully support porting node.js implementation to JVM to make use of this awesome platform (multithreading, java ecosystem etc) I couldn't understand the point of adding another complexity and layer to that and tightly integrating it with JavaEE. I can see no benefits from using that mix in practice. Although the talk itself was quite good, I'm completely not convinced as for the use cases and future of Project Avatar. Maybe that's because I left JavaEE behind some time ago in favor of building smaller application stacks and tweaking it according to my needs using various micro-libraries available. Also it's worth mentioning that Project Avatar is a different beast than Avatar.js which is the thing I'm ok with and which simply brings node.js model to JVM.</p>

<ul>
<li>Avatar.js bundled with JavaEE</li>
<li>Background threads similar to WebWorkers</li>
<li>What are use cases? Where could I apply JS?</li>
<li>Why building yet another layer on top of e.g. JPA?</li>
<li>Looks like heavy, enterprise-ish stack</li>
</ul>


<p>First day GeeCON party was ok. I had quite a few pleasant chats with other geeks over a beer but I had to leave it early as I had my talk on the next day (I was getting a bit nervous already and also wanted to rehearse it once again).</p>

<h2>Deploying And Testing Microservices</h2>

<p>On the second day I deliberately missed first session slot as I couldn't find anything I really wanted to go on this slot. It was completely opposite the next one. I knew I'd go to learn more about (currently all the rage) microservices from Sam Newman. I remembered his excellent talks from last two GeeCON editions. I learnt about taking different approach to testing and deploying microservices and I was happy that things I privately play with (like Vagrant, Packer and Docker) were mentioned as valuable tools in that kind of projects. As a frontend lover I was curious about UI aspect of microservices and finally had a chance to ask Sam about that during the 2nd day party. We had a quite long chat about different approaches and it surprisignly turned into possible Sam's next talk idea :) I was also convinced by him to give Clojure yet another (third) try and really try Go lang.</p>

<ul>
<li>Rethink the way you test when in microservices land</li>
<li>Last tests after production deployment (!)</li>
<li>Virtualization FTW! Vagrant, Packer, Docker</li>
<li>ThoughtWorks uses Ansible for provisioning</li>
<li>One service per machine means huge costs overhead</li>
<li>Virtualize: LXC</li>
<li>Pact - customer-driven contracts</li>
<li>Mountebank - stub service on different protocols</li>
<li>Better have 2 versions of API for some time than two separate services</li>
</ul>


<h2>Building modern web applications - SRP applied</h2>

<p>Then I attended, well... my talk, as a speaker. Taking into account great competition during the same slot (e.g. Ken Sipe about Spock and Arun Gupta on JavaEE 7) I was surprised that I had pretty good number of geeks on the audience. The talk went pretty well I guess and I had several valuable discussions afterwards. By the way, if you attended it and had any kind of feedback to me - I'd be more than happy to hear about it.</p>

<h2>Docker - intro to revolution</h2>

<p>After the most stressful part of the day I could finally sit back, relax and enjoy the rest of the conference. I went to Marek Goldmann's talk about Docker, where I found out about freshly baked Project Atomic as well as about some facts from Docker world I didn't know before. Good talk with a lots of real, live command line coding examples.</p>

<ul>
<li>Start up tons of containers in almost no time</li>
<li>Sharing images</li>
<li>Project Atomic - infrastructure management</li>
</ul>


<h2>High performance, reactive applications with Vert.x</h2>

<p>Last of full-blown, long talks I choose was one by Tim Fox introducing Vert.x. I've just heard about but have never played with Vert.x so decided to give it a try (all in all it among the others mixes up some of my favorite runtimes and languages: JVM, Ruby and JS). Having a great chat with Tim after the talk I found that it's quite complicated at this stage to bring native ruby/js(npm) modules/libs to work on vert.x but I guess it's just a matter of time.</p>

<ul>
<li>Lots of languages available or support landing soon</li>
<li>Messaging bus that can reach frontend</li>
<li>How to add additional modules (jar, npm modules etc)?</li>
<li>Clustering and HA of processes</li>
<li>Work on Vert.x 3 starts now</li>
</ul>


<h2>Lightning talks</h2>

<p>For the lightning talks I choose Room 5 with great talk about self development by Bartosz Majsak, "ok" talk by Jakub Marchwicki about soft aspects of clean code. The last one, remote pair programming session was well... wasted due to some heavy technical issues.</p>

<p>As I left stress and nerves related to my talk behind I could finally relax over a beer with folks at another GeeCON party that night. The venue for speakers dinner as well as attendees party were both great allowing us to fully enjoy the party, have great chats and lots of fun there. Also I was unoficially invited to conduct workshops on awesome <a href="http://warsjawa.pl">Warsjawa</a> workshops conference this year (I had a pleasure to have hold AngularJS workshops last year there).</p>

<h2>Modular JavaScript</h2>

<p>Third day started to me from the second session about modules in JS by Sander Mak and Paul Bakker. Guys prefer AMD modules over CommonJS (and this is what they presented) and I use CommonJS recently but this entire talk was well served. I didn't learn anything new in terms of modularity but I was convinced to try Typescript language and also to give AMD and RequireJS yet another try.</p>

<ul>
<li>Try Typescript</li>
<li>Typescript can compile to both AMD and CJS modules (ES6?)</li>
<li>Quite slow compiler, but has incremental mode (pretty good)</li>
<li>Nice that guys broke up with mvn for frontend build and moved to grunt</li>
</ul>


<h2>Modding Minecraft with a dash of Ruby</h2>

<p>Next I went to see some JRuby in action while poking Minecraft. I didn't really know what to expect as I didn't know much about Minecraft before, but the talk was really good and entertaining. Being able to create extensions to Minecraft with Java or with pretty syntax of Ruby is really cool and makes me want to try that. Also seeing what kind of freaky mods Tom Enebo was showing I was laughing out loud there together with the rest of the audience.</p>

<ul>
<li>Bukkit - library to extend Minecraft</li>
<li>Ruby wrapper for that</li>
<li>Tons of crazy ideas for extensions</li>
</ul>


<h2>Crafted Design</h2>

<p>Last talk I could attend (I had early train back home) was this one by Sandro Mancuso. I knew I wanted to go to this one so there was no doubt in this slot. Well served talk, practically discussing approaches to software development I fully support: thin server-side transport layer (VC in MVC model), controllers with 3-5 lines max, use cases as entry points to your application orchestrating all the required calls, separating read and write use cases and so on. After the talk tons of great questions and answers were given so I'm fully satisfied with this talk.</p>

<ul>
<li>Sane mix of several approaches</li>
<li>Thin web transport layer (VC in MVC)</li>
<li>Small controllers (3-5 lines) delegating to use cases</li>
<li>Use cases as entry points to application</li>
<li>Fast track for "read" use cases. Don't use domain stuff. Builds required view directly on raw DB data</li>
<li>Rethink project packages organization</li>
</ul>


<h2>Summary</h2>

<p>This year GeeCON was probably one of the best and most valuable conferences I've ever attended. I stepped out of my comfort zone again and gave a talk in english. I met old friends and made some new ones, which was not a piece of cake to me. I'm not very "sociable" person when it comes to meeting new people. I'll definitely go to GeeCON next year and can recommend it to all of you if in doubt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Day of Code Retreat 2012]]></title>
    <link href="http://mostr.github.com/blog/2012/12/10/global-day-of-code-retreat-12/"/>
    <updated>2012-12-10T22:35:12+01:00</updated>
    <id>http://mostr.github.com/blog/2012/12/10/global-day-of-code-retreat-12</id>
    <content type="html"><![CDATA[<p>This year at Global Day of Code Retreat event in Lodz we had 57 developers. It was big surprise for us, organizators as we were expecting that not all registered people would be ready to get up early on Saturday and devote whole day to coding with others. As far as I know we were one of the biggest Code Retreats that day :) It was my first Code Retreat as facilitator and I must say, being facilitator is much more exhaustive than being regular attendee. I was completely tired after that whole day but if I had to facilitate next Code Retreat on the following Sunday I' definitely do that. It was awesome day.</p>

<p>So what it was all about? We decided to start officially at 8:30am with breakfast and coffee first. We also hanged out with Code Retreaters in Australia to say hello. Then Pawel Wlodarski introduced the whole Code Retreat idea and explained the problem of the day "Game of Life". After all the introductions and seeing Corey's welcome video we fired up first "no constraints" session. Actually there were some not explicit constraints. We asked all the participants to treat tests seriously, write them, write tests-first and treat tests as regular code. Some of them had heard about TDD before but there were a few who had never written any serious tests. This session was devoted to getting familiar with problem, with tests-first and pair programming ideas (for those who had never experienced that before). Because we had about 60 participants we decided to divide them into 3 groups for retrospection (as there were three of us, facilitators). I can say it was a great choice as it was much easier to control and drive discussion in group od 20 people than 60 people. The only retrospection with the group as a whole was the one after last session. We had bunch of session constraints prepared and were choosing next session's topic on the go basing our decisions on how the previous session was going. Remaining sessions had following constraints:</p>

<ul>
<li>Ping-Pong TDD and keeping methods short (max 5 lines)</li>
<li>One indentation level per method (one abstraction per method)</li>
<li>No mouse session and wrapping primitives into domain objects</li>
<li>Choose what you want from Object Callisthenics by Jeff Bay</li>
<li>Code Swap</li>
</ul>


<p>A lot of people found this Ping-pong TDD session useful, as everyone could be automatically equally involved in the process. They also experienced power of "extract method" refactoring when reaching max lines limit. For the fourth session (no mouse) we had paper copies of key shortcut cheat sheets prepared for several IDEs and it turned out a lot of pairs found it really useful. I saw a lot of people being interested with all the Object Callisthenics constraints and I was asked several times what's that and where to get more info about that. At the end of the last session we asked attendees not to delete their code, which was quite surprising as they were used to do that on every session's end. After the last session and retrospection we had short video conf with guys from Ecuador. And it was basically the end of our GDCR this year.</p>

<p>Judging from feedback forms we mailed to participants next day the event was really great. There was a number of things mentioned in feedback form or during retrospections that they learned during that day. These are things as simple as "unit testing", "key shortcuts" but also like "TDD", "comparing two different approaches to software development: outside-in and inside-out" and so on. We also received a lot of comments and improvements proposals. Although rules of that day were stated and explained at the beginning, some of the attendees were not happy they could not finish the problem and had to start everything from scratch every session. Now I think we could choose constraints better to force attendees to explore different approach in each session. That way they wouldn't end up with repeating the same code every time what was little boring. Clearly there is a lot of things to improve before next GDCR but I personally feel it was really good day and I'm proud I could be a part of it and facilitate such awesome event. Even if I wasn't coding that day I can say I've learnt a lot.</p>

<p>I'd like to thank to all participants here in Lodz and over the world for making that day really special and encourage you, dear reader to consider joining next time expecially if you haven't had a chance to be at Code Retreat before. We hope not to wait until next GDCR and run something local during upcoming year, maybe in Code Retreat way too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My notes from first BYOP meetup in Lodz]]></title>
    <link href="http://mostr.github.com/blog/2012/11/08/first-byop-in-lodz/"/>
    <updated>2012-11-08T11:56:00+01:00</updated>
    <id>http://mostr.github.com/blog/2012/11/08/first-byop-in-lodz</id>
    <content type="html"><![CDATA[<p>First of all what the heck is BYOP? This acronym resolves to <strong>Bring Your Own Problem</strong> and is polish local agile initiative of folks from Code Sprinters. This is set of recurring meetups (they are free of charge) for agile enthusiasts (or those who just want to learn something about it) in different polish cities. Attendees are welcome to bring their own problems they have in organizations, ask questions, exchange ideas or just listen for others agile practitioners. You can read more at <a href="http://byop.pl">byop.pl</a> (site in polish only).</p>

<p>It was very first BYOP meetup organized in Lodz and I was positively surprised with number of attendees. There were 19 of us from different IT companies based in Lodz. Most of the attendees were actively discussing over the whole meeting, but I could spot one or two folks who seemed to be really bored. The whole meeting finished after more than 2,5 hours of hot discussion, what was also a positive surprise for me. I was expecting that we would run out of topics, ideas and people willing to discuss quickly.</p>

<p>So it all started from discussion about team appraisals, bonuses, motivation etc in terms of both development teams as a whole and individual developers and delivering business values. Several real-life examples of appraisal processes and their strenghts and weaknesses in context of whole teams were provided as well as ideas for improvements of current processes. The result of discussion was that it was better to conduct such appraisal processes on the whole team level instead of single developers then tweak the process in exceptional situations and keep away from HR excel forms, points and strict grades. It also turned out that money were not the biggest motivation and introducing transparency within organization might make motivation-related things even better. There was an example of IT company from Bulgaria, where every aspect of their business, from salaries through contracts negotiations and prices to company profits was completely transparent.</p>

<p>Next discussion topic I noticed was about communication and soft skills in developers world. As one said</p>

<blockquote><p>Developers should learn how brain works before they learn how SVN works</p></blockquote>

<p>It is really important to know how to communicate with others and to encourage so called <strong>osmotic communication</strong> within the team, where information is widely accessible and just flows in the air in the team's room. So called <strong>information radiators</strong> are one of the most popular things supporting such model in agile development world. As a part of constant improvement of teams and their work, giving and receiving valuable feedback to others is necessary. It is really hard to do that and some people are simply not brave enough to do that. But as real life examples show after several feedback rounds (occuring every few weeks/months) it gets better and teams can greatly benefit from those feedback sessions. Team members can even stop worrying about giving/receiving immediate feedback. I advise you to read those blog posts of Pawel Brodzinski about feedback: <a href="http://blog.brodzinski.com/2012/08/feedback-culture.html">Feedback Culture</a>, <a href="http://blog.brodzinski.com/2012/04/instant-feedback-culture.html">Instant Feedback</a> and <a href="http://blog.brodzinski.com/2012/07/on-feedback.html">On Feedback</a>.</p>

<p>The next big discussion topic was about role of Project Managers in agile teams. Not all PMs are ok with giving more freedom (and loosing own control) to their teams and they still try to micro-manage to keep this illusion of control. Only small numbers of them can fully understand that their new role during and after agile transformation is to serve the team, to support team's desicions and to push organization in order to give the team what they need. Good Project Manager should be as close to his team as possible, should experience what's happening there. In Lean Manufacturing there is something called <strong>Gemba Walk</strong> which is exactly that. Question: <strong>Does your PM sit together with his team, in the same room?</strong> If not, he is doing it wrong. There was a cite from Roy Osherove who defined three phases of team evolution, where Project Manager (or some kind of leader in general) was required only in first two phases, to manage, show directions and keep things running. His role in last, third phase is just as mentioned above - to help the team do its job, not manage. You can find the full article about it <a href="http://5whys.com/blog/the-3-maturity-stages-of-a-software-team-and-how-scrum-fails.html">here</a>. For some teams where Project Manager can't play well with new model of agile communication and collaboration, teams are forced to build up alternative communication channels bypassing Project Manager and taking over his role (at least partially).</p>

<p>Those are the biggest topics I noticed during the discussion. Besides that there were also following things discussed:</p>

<ul>
<li>There is no point in teams comparison, teams are different and interactions between team members make it unique</li>
<li>How to build team: let people create it or just designate people to teams? Which teams perform better?</li>
<li>Agility in government or other "formality-heavy" institutions</li>
<li>Agile as just only another buzzword</li>
<li>Agile transformation is not possible without agile-addicted freaks who can push this process forward</li>
</ul>


<p>To sum up, I found this meetup worth every single minute I spent there. It is always good to hear and learn from others, and to be able to exchange ideas and have background for applying them. The good news is that next BYOP in Lodz is gonna be on <strong>January&nbsp;16,&nbsp;2013</strong>. I really invite you to come and bring your own problem! I hope we can start building kind of active agile community in Lodz. Why not?</p>
]]></content>
  </entry>
  
</feed>
