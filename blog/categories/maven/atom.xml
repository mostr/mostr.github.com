<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: maven | Hi there, I'm Michal]]></title>
  <link href="http://mostr.github.com/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://mostr.github.com/"/>
  <updated>2015-04-22T18:38:30+02:00</updated>
  <id>http://mostr.github.com/</id>
  <author>
    <name><![CDATA[Michal Ostruszka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Arquillian tests with Maven dependencies in IntelliJ Idea]]></title>
    <link href="http://mostr.github.com/blog/2012/10/24/arquillian-tests-with-maven-deps-intellij/"/>
    <updated>2012-10-24T09:01:00+02:00</updated>
    <id>http://mostr.github.com/blog/2012/10/24/arquillian-tests-with-maven-deps-intellij</id>
    <content type="html"><![CDATA[<p>Arquillian is a big thing. For me it is a revolution in in-container testing. In real world scenarios it is quite common that your JEE components use some libraries, frameworks or other utility classes provided in thirdparty archives. When building project with maven you can make use of <code>pom.xml</code> descriptor and avoid giant amounts of boilerplate code (adding classes and packages of thirdparty libs by hand). I won't dive into details how you can set it up, but the idea is to use <code>MavenDependencyResolver</code> and configure it to read your <code>pom.xml</code>.</p>

<p>``` java Using MavenDependencyResolver</p>

<pre><code>MavenDependencyResolver resolver = DependencyResolvers.use(MavenDependencyResolver.class);
resolver.loadMetadataFromPom("pom.xml");
...
// use in ShrinkWrap archive
</code></pre>

<p>```</p>

<p>This code above works well when run in Eclipse or in command-line Maven, but surprisingly may fail when run from IntelliJ Idea. It complains that <code>pom.xml</code> file cannot be found and read. Some time ago I switched my IDE from Eclipse to IntelliJ Idea and I'm still brand new if it comes to its cofiguration tips and tricks. Quick ShrinkWrap debugging session and it turnes out that IntelliJ invokes tests from <strong>project's dir</strong> instead of <strong>module's dir</strong>. Fortunately I've found a switch for that in IDE.</p>

<h2>There I fixed it</h2>

<p>Go to <strong>Edit Configurations</strong> (under <strong>Run</strong> menu), select <strong>Defaults</strong> branch and then <strong>JUnit</strong>. You can see that <strong>Working directory</strong> is set to project's directory. That's why <code>pom.xml</code> could not be found in this location. Fortunately it can be changed either to <code>MAVEN_REPOSITORY</code> or to <code>MODULE_DIR</code> and the latter is  exactly what you want. Changing that and saving it in defaults makes the issue above disappear.</p>

<p>Now you can run your tests from IntelliJ even if you have maven dependencies to be included in your <code>@Deployment</code> archive.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Even easier FEST assertion generation? Here comes maven plugin for that]]></title>
    <link href="http://mostr.github.com/blog/2012/10/17/maven-plugin-for-generating-fest-assertions/"/>
    <updated>2012-10-17T09:18:00+02:00</updated>
    <id>http://mostr.github.com/blog/2012/10/17/maven-plugin-for-generating-fest-assertions</id>
    <content type="html"><![CDATA[<p>Two posts back, <a href="http://localhost:4000/blog/2012/10/07/generate-custom-fest-assertion-classes-with-one-shot/">here</a> I've described very neat tool for getting your tests (specifically assertions) even more readable. Unfortunately original version this tool is a command-line script and can't be easily linked with build/development process itself.</p>

<p>As I found this tool very useful, I decided to try to give it even more power and spend some time to wrap it in maven plugin. That would allow to link it with regular maven project's lifecycle and have assertions generated on the fly during build process and ready to use immediately. This plugin is now available in Maven Central repo so you can grab it using</p>

<p>``` xml</p>

<pre><code>&lt;groupId&gt;org.easytesting&lt;/groupId&gt;
&lt;artifactId&gt;maven-fest-assertion-generator-plugin&lt;/artifactId&gt;
&lt;version&gt;1.0&lt;/version&gt;
</code></pre>

<p>```</p>

<p>You can also find its sources <a href="https://github.com/joel-costigliola/maven-fest-assertion-generator-plugin">here</a> on github. The repo is hosted on Joel Costigliola's (the author of original generator tool) account in order to have all generator-related stuff in one place, easier to maintain and release.</p>

<p>It's worth saying that there are two important improvements (I also mentioned in previous post) if compared to original previous version of this tool. First of all it generates assertion files in correct package directories structure, so they are ready to use immediately with no tweaks required. The second is that source classes can contain references to other classes from any maven dependency defined in project and they will still have assertions genearated properly. This plugin takes care of loading classes from maven dependencies as well as classes from the project itself. It means you can also generate assertions for classes from your maven dependencies, if required.</p>

<h2>Want to use it?</h2>

<p>First of all it requires FEST assertions in 2.x version, so add the following to your <code>pom.xml</code>:</p>

<p>``` xml</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.easytesting&lt;/groupId&gt;
    &lt;artifactId&gt;fest-assert-core&lt;/artifactId&gt;
    &lt;version&gt;2.0M8&lt;/version&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>

<p>```</p>

<p>Then bind and configure the plugin itself in the <code>&lt;build&gt;</code> section:</p>

<p>``` xml</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.easytesting&lt;/groupId&gt;
    &lt;artifactId&gt;maven-fest-assertion-generator-plugin&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;goals&gt;
                &lt;goal&gt;generate-assertions&lt;/goal&gt;
            &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
    &lt;configuration&gt;
        &lt;packages&gt;
            &lt;param&gt;your.first.package&lt;/param&gt;
            &lt;param&gt;your.second.package&lt;/param&gt;
            ...
        &lt;/packages&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<p>```</p>

<p>The plugin can be launched with command <code>mvn generate-test-sources</code> (or simply <code>mvn test</code> as it will be fired before tests are executed) or with any IDE that supports maven. By default, it generates the assertions source files in <code>target/generated-test-sources/assertions</code> as per maven convention (but this can be changed by defining <code>targetDir</code> configuration element).</p>

<p>This is basic version of this plugin. In future versions defining own templates and assertions generation for single classes will probably be supported.</p>

<p>If you spot any issue, feel free to report it or even better - submit a pull request with fix or improvement.</p>

<p>Have a good assertions!</p>
]]></content>
  </entry>
  
</feed>
