<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: general, | Hi there, I'm Michal]]></title>
  <link href="http://mostr.github.com/blog/categories/general-/atom.xml" rel="self"/>
  <link href="http://mostr.github.com/"/>
  <updated>2015-01-19T11:18:05+01:00</updated>
  <id>http://mostr.github.com/</id>
  <author>
    <name><![CDATA[Michal Ostruszka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web framework is not my application - how I write webapps]]></title>
    <link href="http://mostr.github.com/blog/2014/11/08/use-cases/"/>
    <updated>2014-11-08T16:54:00+01:00</updated>
    <id>http://mostr.github.com/blog/2014/11/08/use-cases</id>
    <content type="html"><![CDATA[<p>If you write web applications you usually use some kind of web framework, so that means you write either controllers (in terms of full-blown MVC frameworks) or so called route handlers (as people working with Sinatra-like style frameworks call them). They are points of integration where your application meets HTTP and the entire web. As any other piece of code we write, these parts too can be written in different flavors. I'd like to show you my approach to writing web applications and explain why I really don't care whether my application is gonna have HTTP integration or any other (e.g. console-based).</p>

<p>During the last years there were different approaches to writing web apps: put everything in controllers, "skinny controllers, fat models", etc. As the former is clearly wrong it's still not uncommon to see people creating huge monster-controllers, full of spaghetti code and doing all heavy-lifting directly in controllers themselves. Putting entire the logic in models has its own drawbacks (rails community knows both pros and cons of this approach) and I'm not gonna discuss it here.</p>
]]></content>
  </entry>
  
</feed>
