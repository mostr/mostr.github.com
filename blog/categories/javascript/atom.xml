<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Hi there, I'm Michal]]></title>
  <link href="http://mostr.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://mostr.github.com/"/>
  <updated>2015-03-30T20:08:27+02:00</updated>
  <id>http://mostr.github.com/</id>
  <author>
    <name><![CDATA[Michal Ostruszka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[You don't always need AngularJS DI in directives]]></title>
    <link href="http://mostr.github.com/blog/2015/01/18/angular-directives-di/"/>
    <updated>2015-01-18T22:43:00+01:00</updated>
    <id>http://mostr.github.com/blog/2015/01/18/angular-directives-di</id>
    <content type="html"><![CDATA[<p>This post is a follow up to the discussion about Angular directives we had recently in <a href="http://softwaremill.com">SoftwareMill</a> with <a href="https://twitter.com/marcin_kubala">Marcin Kubala</a>. Marcin was working on refreshing our Scala with AngularJS scaffolding project called <a href="https://github.com/softwaremill/bootzooka">Bootzooka</a>.</p>

<h2>Use case</h2>

<p>We want to display some notifications to user (think of it as a Twitter Bootstrap's "alert" component). This is to let user know for example that changes he made were either successfuly saved or not, or display any other information user would be able to dismiss once read. There is usually one such place in application that displays that kind of things.</p>

<h2>To the code</h2>

<p>So let's say we have Angular component to keep and manage (add new, dismiss) messages to display. It's gonna be <code>factory</code> so that it nicely encapsulates data and behavior we need and it's easily injectable to almost any other component. Here is slightly simplified version, just for this post's purposes:</p>

<p>``` javascript
app.factory('MessagesStore', function () {</p>

<p>  var messages = []</p>

<p>  function dismiss(msg) {</p>

<pre><code>var i = messages.indexOf(msg);
messages.splice(i, 1);
</code></pre>

<p>  }</p>

<p>  function add(type, text) {</p>

<pre><code>messages.push({ type: type, text: text });
</code></pre>

<p>  }</p>

<p>  return {</p>

<pre><code>messages: messages,
dismiss: dismiss,
add: add
</code></pre>

<p>  }</p>

<p>})
```</p>

<p>Once we have place to store and access messages to be displayed, let's make it displayable with directive. At first we'll define simple template for directive to use:</p>

<p>
``` html</p>

<pre><code>&lt;script id="messages.html" type="text/ng-template"&gt;
  &lt;ul class="messages"&gt;
    &lt;li ng-repeat="m in msgSource.messages"&gt;
      {{ m.type }}: {{ m.text }} &lt;button ng-click="msgSource.dismiss(m)"&gt;dismiss&lt;/button&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/script&gt;
</code></pre>

<p>```
</p>

<p>No rocket science here, just simple <code>ng-repeat</code> to display all stored messages. Also each displayed message can be dismissed by user by clicking <strong>dismiss</strong> button next to it. Now, let's move on to the actual directive:</p>

<p>``` javascript
app.directive('messages', function (MessagesStore) {</p>

<p>  return {</p>

<pre><code>restrict: 'E',
templateUrl: 'messages.html',
link: function(scope) {
  scope.msgSource = MessagesStore;
}
</code></pre>

<p>  }</p>

<p>})
```</p>

<p>As you can see to let directive know about messages to display we simply inject <code>MessagesStore</code> and make use of it (in this case simply assigning it to <code>msgSource</code> used in template). Obviously if there were other stuff to be done (like auto-dismissing messages after some time etc.) there would be more code in <code>link</code> function, but let's not complicate things.</p>

<p>And now... it's done, you may say. It works like a charm, displays any messages that are already stored in <code>MessagesStore</code> and lets you dismiss every single one. Sure, but I personally see one drawback here: this directive is tightly coupled to <code>MessagesStore</code> service. You cannot use it without having this service around and I don't feel this is the best solution. I like to have my directives being independent from other components as much as possible. So let's see how can we deal with it and make it a bit better.</p>

<h2>"Events!", you may say</h2>

<p>And you're right... more or less. Events and publish/subscribe patterns in general give fairly good decoupling. Simply use pub/sub system built into Angular itself. Let's see how it would look like:</p>

<p>``` javascript
app.directive('messages', function ($rootScope) {</p>

<p>  return {</p>

<pre><code>restrict: 'E',
scope: {},
templateUrl: 'messages.html',
link: function(scope, el, attrs) {

  var messages = [];

  $rootScope.$on('msg', function (e, msg) {
    messages.push({ type: msg.type, text: msg.text });  
  });

  function dismiss (msg) {
    var i = messages.indexOf(msg);
    messages.splice(i, 1);
  }

  scope.msgSource = {
    messages: messages,
    dismiss: dismiss
  };

}
</code></pre>

<p>  }</p>

<p>})
<code>``
To display a message you need to publish a</code>msg<code>event from the</code>$rootScope`, like this:</p>

<p><code>javascript
$rootScope.$emit('msg', { type: 'info', text: 'I am message from event'} );
</code></p>

<p>Looks like fairly good way of getting rid of dependencies in directive. Actually it still has one <code>$rootScope</code>, but it's not that bad as "everything" in Angular is in some scope and technically you could with minimal effort use directive's <code>scope</code> instead. But there is one thing that bothers me in this approach: there is no clear concept of messages and messages store. Also there is no clear API saying how it can be used. See? No <code>MessagesStore</code> anywhere, entire well-defined part of the system got blurred somewhere. Now suppose you need two different notifiers in one application displaying different notifications. You can't do that with this evented version shown above. This is because both instances of directive will react on the same event, and will consequently display the same messages. This isn't what you want, right? There is another issue that relates to events in general: if you abuse events and pub/sub in general you'll have hard times when reasoning about the code, tracking all the events and their handlers, order of execution etc. It looks like it's better in terms of dependencies-coupling, but it has its own problems. So is there a hope? Sure it is (if not why would I write that thing anyway?)</p>

<h2>Make it work, then make it right...</h2>

<p>So, both solutions work and are perfectly fine in some kind of applications. But I personally like to have my directives to be as independent and reusable as possible. Let's say I want exactly the same component in my other application: I can't easily take the first one without taking <code>MessagesStore</code> with it. Suppose <code>MessagesStore</code> depends on yet another service and you end up with whole dependency tree to satisfy while you don't really need it in your project. Taking the events-based version introduces yet another event publisher and subscriber to complicate your app a bit more. They in turn introduce events that aren't "native" to your app, they are breaking naming conventions, etc.</p>

<p>Let's define what we really want: reusable directive with possibly minimal set of "component-based" dependencies that need to be satisfied, that has well defined API and clearly visible domain concept it interacts with.</p>

<p>In both solutions shown above, directive itself comes down to <code>&lt;messages&gt;&lt;/messages&gt;</code> snippet in your view. But directives usage can communicate much more, it can define API, entry points. Instead of relying on directive taking service as dependency on framework level (or internally listening for specific event), provide it with <code>MessagesStore</code>-like object that it could interact with. Pass it to directive's isolated scope and make it whatever you want (just stick to <code>MessagesStore</code> API).</p>

<p>``` javascript
app.directive('messages', function () {</p>

<p>  return {</p>

<pre><code>restrict: 'E',
scope: {
  msgSource: '=',
},
templateUrl: 'messages.html'
</code></pre>

<p>  }</p>

<p>});
```
That's all, as simple as that. Now, use it as follows:</p>

<p><code>html
&lt;messages msg-source="msgStore"&gt;&lt;/messages&gt;
</code></p>

<p>Because every directive's instance lives in some controller's scope, just let controller provide stuff that this directive needs:</p>

<p>``` javascript
app.controller('AppCtrl', function($scope, MessagesStore) {</p>

<p>  $scope.store = MessagesStore;</p>

<p>});
```</p>

<p>It may look like unnecessary complexity introducing kind of level of indirection, but think of it: when you need to use this directive in any other project you just take it (with no deps) and the only thing to make it working is to provide it with something that quacks like <code>MessagesStore</code>. When you need several instances of such notifier - no worries, just provide each one with separate <code>MessagesStore</code> like object. Doesn't matter whether the <code>MessageStore</code>-like thing is service, factory or just simple object created ad-hoc in controller, directive doesn't care unless you obey API contract. Another benefit for me personally is that this form of directive (taking attribute defining messages source) is way more readable. It's way more informative than cryptic <code>&lt;messages&gt;&lt;/messages&gt;</code> thing.</p>

<p>And that's all, that's how I'd code that for now. There is nothing new, nothing complicated and definitely no magic (well, maybe except directive's <code>=</code>, for some less experienced angularians). Conceptually this is still dependency injection but key point here is that you don't always need to couple stuff on framework level with its own DI, even if it's perfectly doable and easy. Think of long term project development, maintenance, about components reusability, your fellows developers, etc. I'm not saying this is silver bullet and will work in all your projects, and you should ban injecting any dependencies to directives - I'm far from that. Just think how would you like to use that directive if you were newcomer and what are potential tradeoffs of each solution (because you always have at least two, don't you?).</p>

<p>Regarding <a href="http://c2.com/cgi/wiki?YouArentGonnaNeedIt">YAGNI</a> and not complicating stuff if not required for those who may doubt: initial discussion that triggered this post took place during <strong>migration of some Angular components</strong> from <a href="http://codebrag.com">Codebrag</a> to <a href="https://github.com/softwaremill/bootzooka">Bootzooka</a>, so as you can see thinking a bit about reusability isn't that bad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On managing dependencies in javascript build system]]></title>
    <link href="http://mostr.github.com/blog/2014/05/26/npm-dependencies/"/>
    <updated>2014-05-26T09:06:00+02:00</updated>
    <id>http://mostr.github.com/blog/2014/05/26/npm-dependencies</id>
    <content type="html"><![CDATA[<p>Every serious project depends on libraries or modules written by other developers. We don't want to reinvent the wheel and prefer to use available tried and tested solutions to do our stuff. And here comes dependency management, a way to maintain versions of libraries we use in our projects. It applies to both libraries we use in production application as well as libraries/tools we use to support our development and automation of our workflow. In Javascript there are two most popular ways of handling dependencies: for frontend components there is <a href="http://bower.io">Bower</a> and there is <a href="http://npmjs.org">npm - node packaged modules</a> which is, well... package manager for node.js. Here is my take on managing dependencies with npm but it describes only developer's workflow support. I'm not gonna talk about Bower or any other way of managing frontend-only components, as well as node.js-based production deployments, maybe some time soon.</p>

<p>In <a href="http://codebrag.com">Codebrag</a> we have completely separated frontend application and use <a href="http://gruntjs.com">GruntJS</a> as a build tool for that. As this is node.js-based tool we also make use of npm to manage all the dependencies (grunt plugins etc). There are basically two approaches I've found so far to handle that in node.js based projects, both of which with their pros and cons:</p>

<ul>
<li>commit all dependencies into VCS</li>
<li>rely on <code>package.json</code> file and <code>npm install</code></li>
</ul>


<h2>node_modules - commit or not</h2>

<p>Why would you want to commit all your dependencies to your version control system? It'd significantly increase your repo size, right? That's true, but the most important advantage here is that your application is ready to go immediately after cloning repo. It means you don't have to rely on any external repository (be it official npm registry or your local network cache), you just clone your repo and boot up your application - no more <code>npm install</code> required. Looks like pretty cool thing, huh?</p>

<p>Well, I'm not convinced that much and let me tell you why. I come from java development world where you have tools like Maven, gradle etc. with both central and your local repositories. No dependency is commited to your repository. Sure, it used to be the case years ago when people were not using any standard way of managing dependencies - all libraries your project required were checked into VCS. Also for me it is natural that my project repository contains only this project's code without any external dependencies. Another thing is that in case of dependencies being commited to VCS every single change in <code>package.json</code> must be manually handled in repository - clean up unused packages, add new etc. One more reason I don't feel this approach is my fav one is that you sometimes depend on packages that are platform-dependent, like phantom-js which has different binaries for different platforms. How would you handle that when your dev platform is different from production one (e.g. Mac and Linux)? Would you commit all possible versions? So as you can see, there is a lot of things to consider when choosing your way. There are discussions around all this "commit or not" all over the internet so you can read other people's opinions before choosing your own way.</p>

<h2>npm install</h2>

<p>Now let's move to the other option which sounds better to me personally. It's something I'm used to and it doesn't clutter your project's repo with tons of dependencies. You have them all defined in <code>packages.json</code> file and doing simple <code>npm install</code> fetches them for you. After that you are theoretically ready to boot up your application. But that's not that easy. While defining version of your dependency you can either put strict version, like <code>1.2.3</code>, or you can say <code>&gt;1.2</code> or even <code>~1.2</code> (which is "reasonably close to 1.2") etc. It means you can define ranges of applicable version. And this is where  things get way more complicated. Say, you depend on module <code>foo</code> in <code>1.0.2</code> version and it in turn depends on module <code>bar</code> in version <code>&gt;2.1.0</code>. You have no control over <code>bar</code> version as it is transitive dependency coming with <code>foo</code>. Whenever <code>bar</code> gets released in new version that satisfies <code>&gt;2.1.0</code> you get this new version, even though you don't want that and you haven't changed anything in your dependencies. This is where your build may go unstable and where real WTF happens. There are many issues that can bite you there, in <a href="http://codebrag.com">Codebrag</a> we had problems with non existing versions, npm servers returning 403 and so on. All that with no single change in our dependencies. So as you can see, this approach doesn't force you to maintain the entire jungle when you only want one banana, but it has its own drawbacks.</p>

<h2>npm shrinkwrap</h2>

<p>So is there any other way to handle that? Yes, there is and it's kind of variation of the one above. It's called <a href="https://www.npmjs.org/doc/cli/npm-shrinkwrap.html"><code>npm shrinkwrap</code></a>. This tiny feature of <code>npm</code> effectively resolves all the dependencies tree from what is currently installed in <code>node_modules</code> and locks all the versions down. It creates file <code>npm-shrinkwrap.json</code> next to <code>package.json</code> which is used to determine versions while doing subsequent <code>npm install</code> calls. Now (going back to the foo bar example from above) even if new 'bar' gets released you will not be impacted by this, because you have current version locked and your dependencies tree is always the same. Again this looks like perfect solution - no deps checked into VCS and deterministic versions all the time, yay! Again, not so fast cowboy. Generated file doesn't care whether given dependency is production- or dev-related. By default <code>npm shrinkwrap</code> ignores dev dependencies, but you can force it to use them using <code>--dev</code> switch. But this means that doing subsequent <code>npm install</code> your dev dependencies will be also installed on your production environment, so be aware of that.</p>

<h3>Summary</h3>

<p>The above drawback applies only to node.js applications which is not our case. In <a href="http://codebrag.com">Codebrag</a> we use node.js + npm + grunt to automate our workflow so every dependency in our <code>package.json</code> is dev dependency. It means we can safely use <code>npm shrinkwrap --dev</code> to lock down versions of entire dependencies tree. So whenever you choose not to commit your npm dependencies into your VCS, be aware of this versioning gotcha and consider shrinkwrapping your deps. When the only node.js-based code in your application is the one supporting your frontend build system, <code>npm shrinkwrap --dev</code> seems to be perfect fit for you. Just remember that whenever you change anything dependencies-related in <code>package.json</code>, you need to shrinkwrap it again after new package lands in <code>node_modules</code> so new dependency version gets locked down.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I never really loved Angular auto-unwrapping promises in view]]></title>
    <link href="http://mostr.github.com/blog/2013/12/05/angular-promises-unwrapping/"/>
    <updated>2013-12-05T08:23:00+01:00</updated>
    <id>http://mostr.github.com/blog/2013/12/05/angular-promises-unwrapping</id>
    <content type="html"><![CDATA[<p>One Angular feature that was visually cool (from developer's perspective) was that you could pass promise directly to view and it work on it in HTML as if it was already resolved. I wrote "it was" because Angular folks decided to disable it by default in latest big 1.2 release - you can read more about it <a href="https://github.com/angular/angular.js/commit/5dc35b527b3c99f6544b8cb52e93c6510d3ac577">here</a>.</p>

<p>Let's recap how this auto-unwrapping used to work before 1.2. Let's have simple service that returns list of items wrapped in promise and call this service from controller.</p>

<p>``` javascript
  app.controller('ItemsListCtrl', function($scope, itemsService) {</p>

<pre><code>$scope.items = itemsService.loadItems();
$scope.reload = function() {
  $scope.items = itemsService.loadItems();
};
</code></pre>

<p>  });</p>

<p>  app.service('itemsService', function($q) {</p>

<pre><code>this.loadItems = function() {
  var items = ['item 1', 'item 2', 'item 3', Math.random()];
  return $q.when(items);
};
</code></pre>

<p>  });
```</p>

<p>On the view let's display fetched items together with button to reload this list (it just fetches the same list again with random value added to clearly see it was reloaded).</p>

<p>``` html
  <ul></p>

<pre><code>&lt;li ng-repeat="i in items"&gt;&lt;/li&gt;
</code></pre>

<p>  </ul>
  <button ng-click="reload()">Reload items</button>
```</p>

<h2>It's a list except when it's not</h2>

<p>You can play with this example on <a href="http://jsfiddle.net/mostr/kQjKH/2/">JSFiddle</a>. It works like a charm, displays items, reloads list and so on, so what's the issue, you may ask?
Well, looking at the code of the controller it's not obvious, that <code>$scope.items</code> is really a promise. It looks as simple assignment - you load items and assign list of those items to <code>$scope.items</code>. Nice and clean, but try to e.g. log size of this list, like this:</p>

<p>``` javascript
  app.controller('ItemsListCtrl', function($scope, itemsService, $log) {</p>

<pre><code>$scope.items = itemsService.loadItems();
$log.info($scope.items.length); // boom!
</code></pre>

<p>  });
```</p>

<p>You'll get <code>undefined</code> in console. Surprised? Maybe not in this simple case, but I expect it could bite you hard in real project with larger and more complicated codebase. To confuse you a bit more, when you try to display the same thing in view using <code>items.length</code> binding, it works fine. It is all because when dealing with <code>$scope.items</code> in controller you in fact deal with promise not the actual list of items, but on the view layer you get unwrapped result to play with.</p>

<h2>I disappear</h2>

<p>There is another surprise you can spot while relying on this automatic promises unwrapping. Let's add some delay to our list loading function, so that it emulates fetching data from server (like in real HTTP call there is small delay as server needs to be called).</p>

<p>``` javascript
  app.service('itemsService', function($q, $timeout) {</p>

<pre><code>this.loadItems = function() {
  var dfd = $q.defer();
  $timeout(function() {
    var items = ['item 1', 'item 2', 'item 3', Math.random()];
    dfd.resolve(items);
  }, 500);
  return dfd.promise;
};
</code></pre>

<p>  });
```</p>

<p>Again go to <a href="http://jsfiddle.net/mostr/7qAbP/2/">this fiddle</a> to see it running. Now when you hit "reload" button, this list disappears for a while and then appears back. This is again due to the fact that you pass raw promise to the view. It cannot render until this promise gets resolved, so it renders nothing and appears again when promise is resolved. So the longer the delay is the more unpleasant the experience can be. How to avoid that? One solution is to delay controller instantiation until promises are resolved (using resolve property on route) but that's not one I'm gonna show here. The exact one is explicitly deal with promises like below:</p>

<p>``` javascript
  app.controller('ItemsListCtrl', function($scope, itemsService) {</p>

<pre><code>itemsService.loadItems().then(passItemsToScope);
$scope.reload = function() {
  itemsService.loadItems(passItemsToScope);
};
function passItemsToScope(items) {
  $scope.items = items;
}
</code></pre>

<p>  });
```</p>

<p>That's few keystrokes more but for me it's definitely worth it. Now you don't touch existing items list until promise is resolved so swapping actual list is blazingly fast - go and try it <a href="http://jsfiddle.net/mostr/qG7jV/2/">there</a>. The list doesn't disappear while waiting for promise to be resolved - it just stays there and gets reassigned and rerendered in (almost) one go. Another benefit is that this code clearly says what it does and aligns nicely with <a href="http://en.wikipedia.org/wiki/Principle_of_least_astonishment">Principle of least surprise</a>. You clearly see that what is returned from <code>itemsService.loadItems()</code> is a promise, so you can deal with it accordingly.</p>

<h2>Summary</h2>

<p>I don't say that both of those points mentioned above are vailid in all cases. It can serve you well, especially the one with disappearing content (some may have such requirement). Anyway I'm personally (<a href="https://twitter.com/mostruszka/status/391253436382978049">really</a>) happy, that Angular folks decided to disable that feature from version 1.2+. Even if it was visually appealing, clean and so on it could potentially introduce a lot of WTFs to your daily work. If you by any chance really miss that feature, there is a way to bring it back, but I'm sorry I'm not gonna give you a clear hint how to do that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selectively run specs or suites in Jasmine]]></title>
    <link href="http://mostr.github.com/blog/2013/11/06/selective-specs-in-jasmine/"/>
    <updated>2013-11-06T22:38:00+01:00</updated>
    <id>http://mostr.github.com/blog/2013/11/06/selective-specs-in-jasmine</id>
    <content type="html"><![CDATA[<p>I'm sure you write tests for your code. There is no excuse for that, even for Javascript - language which used to be treated as a toy one some time ago. Now Javascript ecosystem changed and its toolbox is full of development tools also those for testing purposes.</p>

<p>One of the most popular testing tools for Javascript is <a href="http://pivotal.github.io/jasmine">Jasmine</a>. It can be run in browser via HTML runner or as a part of automated workflow (which I highly recommend to build for every serious JS app). Sometimes when working on some particular feature, or fixing some stuff you may not want to have all your specs in all suites run every time you touch source file. Suppose you have tons of tests failing (e.g. due to upgrade of some core library) with a lot of errors but you want to focus on just few of them and fix them one by one. It'd be great if there was an ability to let Jasmine know to run only specs you wanted. So how to to it? Looks like there is not much about it in Jasmine documentation. The only thing mentioned is you can disable given suite by changing <code>describe</code> to <code>xdescribe</code> or changing <code>it</code> to <code>xit</code> for single spec. But it'd be silly to disable hundreds of tests that way just to be able to run few others, right?</p>

<p>It turns out that there is much easier way to do that. Let's look at the code below:</p>

<p>``` javascript running single spec
describe('Your awesome feature' function() {</p>

<p>  it('should do something', function() {</p>

<pre><code>// stuff here
</code></pre>

<p>  });</p>

<p>  // only this spec will be run
  iit('should not do something other', function() {</p>

<pre><code>// stuff here
</code></pre>

<p>  });</p>

<p>});
```</p>

<p>In the code above changing regular <code>it</code> in second spec definition to <code>iit</code> disables all other tests (in all suites that are about to run) except this one. To run whole suite with several specs in it just change <code>describe</code> to <code>ddescribe</code> and only this suite's specs will be run. There is no need to add <code>iit</code> in every single spec inside. See the code below:</p>

<p>``` javascript running single suite
// only specs in this suite will be run
ddescribe('Your awesome feature' function() {</p>

<p>  it('should do something', function() {</p>

<pre><code>// stuff here
</code></pre>

<p>  });</p>

<p>  it('should not do something other', function() {</p>

<pre><code>// stuff here
</code></pre>

<p>  });</p>

<p>});
```</p>

<p>You can mark several specs/suites that way and all of them will be run exclusively. This behavior although not well documented is Jasmine feature and is independent on runner you use to run your tests. I personally use <a href="http://karma-runner.github.io">Karma</a> and it works like a charm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Access and manipulate AngularJS $scope from browser's console]]></title>
    <link href="http://mostr.github.com/blog/2013/09/24/angularjs-in-browsers-console/"/>
    <updated>2013-09-24T12:28:00+02:00</updated>
    <id>http://mostr.github.com/blog/2013/09/24/angularjs-in-browsers-console</id>
    <content type="html"><![CDATA[<p>This one's gonna be quick. Have you ever wanted to trigger some action in your AngularJS application from browser's console? I mean, broadcast event (just for development/debug purposes), call functions on <code>$scope</code> or do other stuff? Let's see what we can do with it.</p>

<p>Every AngularJS application is bound to exactly one DOM element e.g.</p>

<p><code>html
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  // regular stuff here
&lt;/head&gt;
&lt;body ng-app="myApplication"&gt;
  // AngularJS stuff here
&lt;/body&gt;
&lt;/html&gt;
</code></p>

<p>It also means that every single DOM element within <code>body</code> (in example above) is bound to some instance of <code>Scope</code>. And that's all we need - scope we can call functions on, change properties, access <code>$rootScope</code>, broadcast events etc. So let's grab this scope to play with it. AngularJS adds some extras to existing jQuery (if loaded) or provides its own jQLite with those extras built-in. One of those extra features is ability to get reference to scope bound to given DOM element. Try it:</p>

<p>``` javascript
// in browser's console
$('body').scope();</p>

<blockquote><blockquote><p>Scope {$id: "002", $$childTail: Child, $$childHead: Scope, $$prevSibling: null, …}
```</p></blockquote></blockquote>

<p>Whoaa! Looks like we got scope reference. From now on you can do whatever you need with this scope. Obviously you can grab any DOM element (within AngularJS application), target it with jQuery and get its scope to play with. If you don't have full blown jQuery loaded you can still do tricks as above but with using <code>angular.element</code> instead</p>

<p>``` javascript
var sidebar = document.getElementsById('sidebar');
var scope = angular.element(sidebar).scope();</p>

<blockquote><blockquote><p>Scope {$id: "00J", $$childTail: null, $$childHead: null, $$prevSibling: null, …}
```</p></blockquote></blockquote>

<p>One thing you need to remember about is if you want to fire an action on <code>$scope</code> from outside of AngularJS "world", you need to wrap your stuff in <code>$scope.$apply</code> to let AngularJS know about your changes. So just to recap, fire an event using <code>$rootScope</code> from console would look like below:</p>

<p><code>javascript
// in browser's console
var sidebar = document.getElementsById('sidebar');
var scope = angular.element(sidebar).scope();
var rootScope = scope.$root;
scope.$apply(function() {
  rootScope.$broadcast('myEvent', {data: myData});
});
</code></p>

<p>And you should now see your application reacting on this freshly baked event, raised from browser's console.</p>
]]></content>
  </entry>
  
</feed>
