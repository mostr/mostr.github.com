<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angularjs | Hi there, I'm Michal]]></title>
  <link href="http://mostr.github.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://mostr.github.com/"/>
  <updated>2015-03-30T20:08:27+02:00</updated>
  <id>http://mostr.github.com/</id>
  <author>
    <name><![CDATA[Michal Ostruszka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[You don't always need AngularJS DI in directives]]></title>
    <link href="http://mostr.github.com/blog/2015/01/18/angular-directives-di/"/>
    <updated>2015-01-18T22:43:00+01:00</updated>
    <id>http://mostr.github.com/blog/2015/01/18/angular-directives-di</id>
    <content type="html"><![CDATA[<p>This post is a follow up to the discussion about Angular directives we had recently in <a href="http://softwaremill.com">SoftwareMill</a> with <a href="https://twitter.com/marcin_kubala">Marcin Kubala</a>. Marcin was working on refreshing our Scala with AngularJS scaffolding project called <a href="https://github.com/softwaremill/bootzooka">Bootzooka</a>.</p>

<h2>Use case</h2>

<p>We want to display some notifications to user (think of it as a Twitter Bootstrap's "alert" component). This is to let user know for example that changes he made were either successfuly saved or not, or display any other information user would be able to dismiss once read. There is usually one such place in application that displays that kind of things.</p>

<h2>To the code</h2>

<p>So let's say we have Angular component to keep and manage (add new, dismiss) messages to display. It's gonna be <code>factory</code> so that it nicely encapsulates data and behavior we need and it's easily injectable to almost any other component. Here is slightly simplified version, just for this post's purposes:</p>

<p>``` javascript
app.factory('MessagesStore', function () {</p>

<p>  var messages = []</p>

<p>  function dismiss(msg) {</p>

<pre><code>var i = messages.indexOf(msg);
messages.splice(i, 1);
</code></pre>

<p>  }</p>

<p>  function add(type, text) {</p>

<pre><code>messages.push({ type: type, text: text });
</code></pre>

<p>  }</p>

<p>  return {</p>

<pre><code>messages: messages,
dismiss: dismiss,
add: add
</code></pre>

<p>  }</p>

<p>})
```</p>

<p>Once we have place to store and access messages to be displayed, let's make it displayable with directive. At first we'll define simple template for directive to use:</p>

<p>
``` html</p>

<pre><code>&lt;script id="messages.html" type="text/ng-template"&gt;
  &lt;ul class="messages"&gt;
    &lt;li ng-repeat="m in msgSource.messages"&gt;
      {{ m.type }}: {{ m.text }} &lt;button ng-click="msgSource.dismiss(m)"&gt;dismiss&lt;/button&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/script&gt;
</code></pre>

<p>```
</p>

<p>No rocket science here, just simple <code>ng-repeat</code> to display all stored messages. Also each displayed message can be dismissed by user by clicking <strong>dismiss</strong> button next to it. Now, let's move on to the actual directive:</p>

<p>``` javascript
app.directive('messages', function (MessagesStore) {</p>

<p>  return {</p>

<pre><code>restrict: 'E',
templateUrl: 'messages.html',
link: function(scope) {
  scope.msgSource = MessagesStore;
}
</code></pre>

<p>  }</p>

<p>})
```</p>

<p>As you can see to let directive know about messages to display we simply inject <code>MessagesStore</code> and make use of it (in this case simply assigning it to <code>msgSource</code> used in template). Obviously if there were other stuff to be done (like auto-dismissing messages after some time etc.) there would be more code in <code>link</code> function, but let's not complicate things.</p>

<p>And now... it's done, you may say. It works like a charm, displays any messages that are already stored in <code>MessagesStore</code> and lets you dismiss every single one. Sure, but I personally see one drawback here: this directive is tightly coupled to <code>MessagesStore</code> service. You cannot use it without having this service around and I don't feel this is the best solution. I like to have my directives being independent from other components as much as possible. So let's see how can we deal with it and make it a bit better.</p>

<h2>"Events!", you may say</h2>

<p>And you're right... more or less. Events and publish/subscribe patterns in general give fairly good decoupling. Simply use pub/sub system built into Angular itself. Let's see how it would look like:</p>

<p>``` javascript
app.directive('messages', function ($rootScope) {</p>

<p>  return {</p>

<pre><code>restrict: 'E',
scope: {},
templateUrl: 'messages.html',
link: function(scope, el, attrs) {

  var messages = [];

  $rootScope.$on('msg', function (e, msg) {
    messages.push({ type: msg.type, text: msg.text });  
  });

  function dismiss (msg) {
    var i = messages.indexOf(msg);
    messages.splice(i, 1);
  }

  scope.msgSource = {
    messages: messages,
    dismiss: dismiss
  };

}
</code></pre>

<p>  }</p>

<p>})
<code>``
To display a message you need to publish a</code>msg<code>event from the</code>$rootScope`, like this:</p>

<p><code>javascript
$rootScope.$emit('msg', { type: 'info', text: 'I am message from event'} );
</code></p>

<p>Looks like fairly good way of getting rid of dependencies in directive. Actually it still has one <code>$rootScope</code>, but it's not that bad as "everything" in Angular is in some scope and technically you could with minimal effort use directive's <code>scope</code> instead. But there is one thing that bothers me in this approach: there is no clear concept of messages and messages store. Also there is no clear API saying how it can be used. See? No <code>MessagesStore</code> anywhere, entire well-defined part of the system got blurred somewhere. Now suppose you need two different notifiers in one application displaying different notifications. You can't do that with this evented version shown above. This is because both instances of directive will react on the same event, and will consequently display the same messages. This isn't what you want, right? There is another issue that relates to events in general: if you abuse events and pub/sub in general you'll have hard times when reasoning about the code, tracking all the events and their handlers, order of execution etc. It looks like it's better in terms of dependencies-coupling, but it has its own problems. So is there a hope? Sure it is (if not why would I write that thing anyway?)</p>

<h2>Make it work, then make it right...</h2>

<p>So, both solutions work and are perfectly fine in some kind of applications. But I personally like to have my directives to be as independent and reusable as possible. Let's say I want exactly the same component in my other application: I can't easily take the first one without taking <code>MessagesStore</code> with it. Suppose <code>MessagesStore</code> depends on yet another service and you end up with whole dependency tree to satisfy while you don't really need it in your project. Taking the events-based version introduces yet another event publisher and subscriber to complicate your app a bit more. They in turn introduce events that aren't "native" to your app, they are breaking naming conventions, etc.</p>

<p>Let's define what we really want: reusable directive with possibly minimal set of "component-based" dependencies that need to be satisfied, that has well defined API and clearly visible domain concept it interacts with.</p>

<p>In both solutions shown above, directive itself comes down to <code>&lt;messages&gt;&lt;/messages&gt;</code> snippet in your view. But directives usage can communicate much more, it can define API, entry points. Instead of relying on directive taking service as dependency on framework level (or internally listening for specific event), provide it with <code>MessagesStore</code>-like object that it could interact with. Pass it to directive's isolated scope and make it whatever you want (just stick to <code>MessagesStore</code> API).</p>

<p>``` javascript
app.directive('messages', function () {</p>

<p>  return {</p>

<pre><code>restrict: 'E',
scope: {
  msgSource: '=',
},
templateUrl: 'messages.html'
</code></pre>

<p>  }</p>

<p>});
```
That's all, as simple as that. Now, use it as follows:</p>

<p><code>html
&lt;messages msg-source="msgStore"&gt;&lt;/messages&gt;
</code></p>

<p>Because every directive's instance lives in some controller's scope, just let controller provide stuff that this directive needs:</p>

<p>``` javascript
app.controller('AppCtrl', function($scope, MessagesStore) {</p>

<p>  $scope.store = MessagesStore;</p>

<p>});
```</p>

<p>It may look like unnecessary complexity introducing kind of level of indirection, but think of it: when you need to use this directive in any other project you just take it (with no deps) and the only thing to make it working is to provide it with something that quacks like <code>MessagesStore</code>. When you need several instances of such notifier - no worries, just provide each one with separate <code>MessagesStore</code> like object. Doesn't matter whether the <code>MessageStore</code>-like thing is service, factory or just simple object created ad-hoc in controller, directive doesn't care unless you obey API contract. Another benefit for me personally is that this form of directive (taking attribute defining messages source) is way more readable. It's way more informative than cryptic <code>&lt;messages&gt;&lt;/messages&gt;</code> thing.</p>

<p>And that's all, that's how I'd code that for now. There is nothing new, nothing complicated and definitely no magic (well, maybe except directive's <code>=</code>, for some less experienced angularians). Conceptually this is still dependency injection but key point here is that you don't always need to couple stuff on framework level with its own DI, even if it's perfectly doable and easy. Think of long term project development, maintenance, about components reusability, your fellows developers, etc. I'm not saying this is silver bullet and will work in all your projects, and you should ban injecting any dependencies to directives - I'm far from that. Just think how would you like to use that directive if you were newcomer and what are potential tradeoffs of each solution (because you always have at least two, don't you?).</p>

<p>Regarding <a href="http://c2.com/cgi/wiki?YouArentGonnaNeedIt">YAGNI</a> and not complicating stuff if not required for those who may doubt: initial discussion that triggered this post took place during <strong>migration of some Angular components</strong> from <a href="http://codebrag.com">Codebrag</a> to <a href="https://github.com/softwaremill/bootzooka">Bootzooka</a>, so as you can see thinking a bit about reusability isn't that bad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I never really loved Angular auto-unwrapping promises in view]]></title>
    <link href="http://mostr.github.com/blog/2013/12/05/angular-promises-unwrapping/"/>
    <updated>2013-12-05T08:23:00+01:00</updated>
    <id>http://mostr.github.com/blog/2013/12/05/angular-promises-unwrapping</id>
    <content type="html"><![CDATA[<p>One Angular feature that was visually cool (from developer's perspective) was that you could pass promise directly to view and it work on it in HTML as if it was already resolved. I wrote "it was" because Angular folks decided to disable it by default in latest big 1.2 release - you can read more about it <a href="https://github.com/angular/angular.js/commit/5dc35b527b3c99f6544b8cb52e93c6510d3ac577">here</a>.</p>

<p>Let's recap how this auto-unwrapping used to work before 1.2. Let's have simple service that returns list of items wrapped in promise and call this service from controller.</p>

<p>``` javascript
  app.controller('ItemsListCtrl', function($scope, itemsService) {</p>

<pre><code>$scope.items = itemsService.loadItems();
$scope.reload = function() {
  $scope.items = itemsService.loadItems();
};
</code></pre>

<p>  });</p>

<p>  app.service('itemsService', function($q) {</p>

<pre><code>this.loadItems = function() {
  var items = ['item 1', 'item 2', 'item 3', Math.random()];
  return $q.when(items);
};
</code></pre>

<p>  });
```</p>

<p>On the view let's display fetched items together with button to reload this list (it just fetches the same list again with random value added to clearly see it was reloaded).</p>

<p>``` html
  <ul></p>

<pre><code>&lt;li ng-repeat="i in items"&gt;&lt;/li&gt;
</code></pre>

<p>  </ul>
  <button ng-click="reload()">Reload items</button>
```</p>

<h2>It's a list except when it's not</h2>

<p>You can play with this example on <a href="http://jsfiddle.net/mostr/kQjKH/2/">JSFiddle</a>. It works like a charm, displays items, reloads list and so on, so what's the issue, you may ask?
Well, looking at the code of the controller it's not obvious, that <code>$scope.items</code> is really a promise. It looks as simple assignment - you load items and assign list of those items to <code>$scope.items</code>. Nice and clean, but try to e.g. log size of this list, like this:</p>

<p>``` javascript
  app.controller('ItemsListCtrl', function($scope, itemsService, $log) {</p>

<pre><code>$scope.items = itemsService.loadItems();
$log.info($scope.items.length); // boom!
</code></pre>

<p>  });
```</p>

<p>You'll get <code>undefined</code> in console. Surprised? Maybe not in this simple case, but I expect it could bite you hard in real project with larger and more complicated codebase. To confuse you a bit more, when you try to display the same thing in view using <code>items.length</code> binding, it works fine. It is all because when dealing with <code>$scope.items</code> in controller you in fact deal with promise not the actual list of items, but on the view layer you get unwrapped result to play with.</p>

<h2>I disappear</h2>

<p>There is another surprise you can spot while relying on this automatic promises unwrapping. Let's add some delay to our list loading function, so that it emulates fetching data from server (like in real HTTP call there is small delay as server needs to be called).</p>

<p>``` javascript
  app.service('itemsService', function($q, $timeout) {</p>

<pre><code>this.loadItems = function() {
  var dfd = $q.defer();
  $timeout(function() {
    var items = ['item 1', 'item 2', 'item 3', Math.random()];
    dfd.resolve(items);
  }, 500);
  return dfd.promise;
};
</code></pre>

<p>  });
```</p>

<p>Again go to <a href="http://jsfiddle.net/mostr/7qAbP/2/">this fiddle</a> to see it running. Now when you hit "reload" button, this list disappears for a while and then appears back. This is again due to the fact that you pass raw promise to the view. It cannot render until this promise gets resolved, so it renders nothing and appears again when promise is resolved. So the longer the delay is the more unpleasant the experience can be. How to avoid that? One solution is to delay controller instantiation until promises are resolved (using resolve property on route) but that's not one I'm gonna show here. The exact one is explicitly deal with promises like below:</p>

<p>``` javascript
  app.controller('ItemsListCtrl', function($scope, itemsService) {</p>

<pre><code>itemsService.loadItems().then(passItemsToScope);
$scope.reload = function() {
  itemsService.loadItems(passItemsToScope);
};
function passItemsToScope(items) {
  $scope.items = items;
}
</code></pre>

<p>  });
```</p>

<p>That's few keystrokes more but for me it's definitely worth it. Now you don't touch existing items list until promise is resolved so swapping actual list is blazingly fast - go and try it <a href="http://jsfiddle.net/mostr/qG7jV/2/">there</a>. The list doesn't disappear while waiting for promise to be resolved - it just stays there and gets reassigned and rerendered in (almost) one go. Another benefit is that this code clearly says what it does and aligns nicely with <a href="http://en.wikipedia.org/wiki/Principle_of_least_astonishment">Principle of least surprise</a>. You clearly see that what is returned from <code>itemsService.loadItems()</code> is a promise, so you can deal with it accordingly.</p>

<h2>Summary</h2>

<p>I don't say that both of those points mentioned above are vailid in all cases. It can serve you well, especially the one with disappearing content (some may have such requirement). Anyway I'm personally (<a href="https://twitter.com/mostruszka/status/391253436382978049">really</a>) happy, that Angular folks decided to disable that feature from version 1.2+. Even if it was visually appealing, clean and so on it could potentially introduce a lot of WTFs to your daily work. If you by any chance really miss that feature, there is a way to bring it back, but I'm sorry I'm not gonna give you a clear hint how to do that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Access and manipulate AngularJS $scope from browser's console]]></title>
    <link href="http://mostr.github.com/blog/2013/09/24/angularjs-in-browsers-console/"/>
    <updated>2013-09-24T12:28:00+02:00</updated>
    <id>http://mostr.github.com/blog/2013/09/24/angularjs-in-browsers-console</id>
    <content type="html"><![CDATA[<p>This one's gonna be quick. Have you ever wanted to trigger some action in your AngularJS application from browser's console? I mean, broadcast event (just for development/debug purposes), call functions on <code>$scope</code> or do other stuff? Let's see what we can do with it.</p>

<p>Every AngularJS application is bound to exactly one DOM element e.g.</p>

<p><code>html
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  // regular stuff here
&lt;/head&gt;
&lt;body ng-app="myApplication"&gt;
  // AngularJS stuff here
&lt;/body&gt;
&lt;/html&gt;
</code></p>

<p>It also means that every single DOM element within <code>body</code> (in example above) is bound to some instance of <code>Scope</code>. And that's all we need - scope we can call functions on, change properties, access <code>$rootScope</code>, broadcast events etc. So let's grab this scope to play with it. AngularJS adds some extras to existing jQuery (if loaded) or provides its own jQLite with those extras built-in. One of those extra features is ability to get reference to scope bound to given DOM element. Try it:</p>

<p>``` javascript
// in browser's console
$('body').scope();</p>

<blockquote><blockquote><p>Scope {$id: "002", $$childTail: Child, $$childHead: Scope, $$prevSibling: null, …}
```</p></blockquote></blockquote>

<p>Whoaa! Looks like we got scope reference. From now on you can do whatever you need with this scope. Obviously you can grab any DOM element (within AngularJS application), target it with jQuery and get its scope to play with. If you don't have full blown jQuery loaded you can still do tricks as above but with using <code>angular.element</code> instead</p>

<p>``` javascript
var sidebar = document.getElementsById('sidebar');
var scope = angular.element(sidebar).scope();</p>

<blockquote><blockquote><p>Scope {$id: "00J", $$childTail: null, $$childHead: null, $$prevSibling: null, …}
```</p></blockquote></blockquote>

<p>One thing you need to remember about is if you want to fire an action on <code>$scope</code> from outside of AngularJS "world", you need to wrap your stuff in <code>$scope.$apply</code> to let AngularJS know about your changes. So just to recap, fire an event using <code>$rootScope</code> from console would look like below:</p>

<p><code>javascript
// in browser's console
var sidebar = document.getElementsById('sidebar');
var scope = angular.element(sidebar).scope();
var rootScope = scope.$root;
scope.$apply(function() {
  rootScope.$broadcast('myEvent', {data: myData});
});
</code></p>

<p>And you should now see your application reacting on this freshly baked event, raised from browser's console.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fine-tune HTTP errors handling in AngularJS using custom request configurations]]></title>
    <link href="http://mostr.github.com/blog/2013/09/06/selective_http_errors_handling_in_angularjs/"/>
    <updated>2013-09-06T14:48:00+02:00</updated>
    <id>http://mostr.github.com/blog/2013/09/06/selective_http_errors_handling_in_angularjs</id>
    <content type="html"><![CDATA[<p>Let's stay close to HTTP request/response cycle in AngularJS for a while. Remember <a href="http://michalostruszka.pl/blog/2013/07/31/double-requests/">my previous post</a> about throttling duplicated requests? I showed how to use <code>config</code> object populated with custom properties to control which HTTP requests are invoked and which are not. This time I'll show you how to use the same <code>config</code> object but for playing with HTTP response.</p>

<p>Sometimes you may want for example to process different responses in different ways. Let's take HTTP errors for example. When you receive response with HTTP code different that 2xx in most applications you probably want to let user know that something wrong happened, so you may decide to display some popup with error message. This can be easily achieved with response interceptors in AngularJS. Simply write and enable interceptor that handles all failed responses and does something (e.g. broadcasts an event with error details which is then handled by specialized directive that displays message to user). In the simplest form such interceptor may look as follows:</p>

<p>``` javascript Simple HTTP errors handling interceptor</p>

<pre><code>angular.module('app').factory('httpErrorsInterceptor', function ($q, $rootScope, EventsDict) {

    function successHandler(response) {
        return response;
    }

    function errorHandler(response) {
        $rootScope.$broadcast(EventsDict.httpError, response.data.cause);
        return $q.reject(response);
    }

    return function(httpPromise) {
        return httpPromise.then(successHandler, errorHandler);
    };

});
</code></pre>

<p>```</p>

<p>It simply passes successful responses through and for error responses it broadcasts custom event (<code>EventsDict.httpError</code>) and then rejects it as it would be done normally. That's cool, but suppose you have a feature in your application that has its own way of handling errors? In <a href="http://codebrag.com">Codebrag</a> we have "Invite others" form that after sending should display to user whether his invitation was sent or whether there was something wrong with it on the server side. Besides that we have general "error bubble" that is displayed when any error (including HTTP ones) occurs. As long as our "Invite others" form handles this case on its own we don't need to display this standard bubble anymore for those requests.</p>

<p>Ideally we'd like to have a way to tell which requests should be even considered by our interceptor when processing response and which should be left alone and just passed through. So here is what we did. In Angular every HTTP response has <code>config</code> object attached to it and this is exactly the same <code>config</code> object as the one from corresponding request. Let's make use of it again. When sending HTTP request let's define custom property in its <code>config</code> object:</p>

<p>``` javascript POST request with custom config property
  var data  = {</p>

<pre><code>  invitationMsg: 'Hey! Come and join Codebrag',
  newUserEmail: 'foo@bar.com'
</code></pre>

<p>  };
  $http.post('/invitation', data, {bypassErrorsInterceptor: true});</p>

<p>```</p>

<p>And here it is. Custom <code>bypassErrorsInterceptor</code> property will be set for each requests of this type. Now the core stuff - let's modify our simple interceptor to leave responses for those requests alone. Just let them be rejected without any other work, but keep watching and reacting on any other requests that don't have this property set.</p>

<p>``` javascript Complete interceptor with custom property handling</p>

<pre><code>angular.module('app').factory('httpErrorsInterceptor', function ($q, $rootScope, EventsDict) {

    function successHandler(response) {
        return response;
    }

    function errorHandler(response) {
        var config = response.config;
        if(config.bypassErrorInterceptor) {
            return $q.reject(response);
        }
        $rootScope.$broadcast(EventsDict.httpError, response.data.cause);
        return $q.reject(response);
    }

    return function (promise) {
        return promise.then(successHandler, errorHandler);
    };

});
</code></pre>

<p>```</p>

<p>Done. Now every HTTP request with <code>bypassErrorsInterceptor</code> property set will be passed through and the rest will result with event broadcasting.</p>

<p>If you want to treat different HTTP error codes in different ways you can as well match responses by response code, send different events and display different messages to user - it's up to you, this can be also done in interceptors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preventing duplicated requests in AngularJS]]></title>
    <link href="http://mostr.github.com/blog/2013/07/31/double-requests/"/>
    <updated>2013-07-31T22:12:00+02:00</updated>
    <id>http://mostr.github.com/blog/2013/07/31/double-requests</id>
    <content type="html"><![CDATA[<p><em>Note: You can read the same post published on <a href="http://blog.codebrag.com/post/57412530001/preventing-duplicated-requests-in-angularjs">Codebrag blog</a>.</em></p>

<p>You know the case when you hit submit button quickly enough that it sends the form twice? Or when you hit submit button and it seems that nothing happens, so you click it once again and another request is being fired? Duplicated requests issue - you can experience it in both traditional web application as well as in modern so-called Single Page Applications. I'd like to show you how it can be handled in AngularJS and how we did it in <a href="http://codebrag.com">Codebrag</a>.</p>

<p>AngularJS itself has no built-in stuff for that. You can fire as many HTTP requests as you want and it is up to you and your application's code to handle it the way that would prevent double form submission. So let's see what weapons we are armed with to win this battle.</p>

<h2>Disable button after submit</h2>

<p>Suppose you want to prevent user to double-submit the same form. You can write pretty simple AngularJS directive to disable button when clicked. It will effectively block this button from being pressed again until e.g. response comes back. I personally don't really like this one, because you need to remember to put this directive on every form in you application. It looks like violating DRY a bit. So let's look for something better.</p>

<h2>Asynchronous UI approach</h2>

<p>This is not a solution to this particular problem per se but more an approach to building web applications. <a href="http://blog.alexmaccaw.com/asynchronous-ui">Alex McCaw</a> has great post about it which I highly recommend reading. Basically the trick is not to wait for server's response if it is not absolutely required. Simply act as if action was performed succesfully and immediately do what should be done on success. So let's take our form submit example. When user clicks submit button you fire HTTP request as usual and close form (possibly doing something more too, like adding comment to list) without waiting for response from server. It effectively prevents user from resubmitting form as it disappears immediately after button click. Obviously there are some drawbacks too and there are also use-cases (like payments etc) where this approach isn't recommended, but in most cases it will work fine. For more details I really recommend reading <a href="http://blog.alexmaccaw.com/asynchronous-ui">Alex's post</a>.</p>

<h2>AngularJS-based solution</h2>

<p>Ok but this approach above requires rethinking and possibly changing significant stuff in you application. What if you don't really want to do that? It turns out that solution for our initial problem can be quite easily implemented with tooling already available in AngularJS.</p>

<p>What we need to do is to "intercept" <code>$http</code> service calls and decide if given request should be sent or not. Angular has concept of http interceptors but only for responses, not for requests (yet). But fear not, we'll use decorators. As official doc says</p>

<blockquote><p>Decoration of service, allows the decorator to intercept the service instance creation. The returned instance may be the original instance, or a new instance which delegates to the original instance.</p></blockquote>

<p>and that's exactly what we need. So this is how decorator can be applied:</p>

<p>``` javascript decorator usage</p>

<pre><code>angular.module('app').config(function($provide) {
    $provide.decorator('$http', function($delegate, $q) {
        return app.commons.uniqueRequestsAwareHttpService($delegate, $q);
    });
})
</code></pre>

<p>```</p>

<p>I'll show you the details of implementation soon. Next issue to solve is how to determine when requests are identical and if one is already in progress? In the simplest form HTTP requests in AngularJS are done as below:</p>

<p>``` javascript simple http call</p>

<pre><code>var config = {method: 'POST', url: 'http://api.myapp.com/comment', data: {msg: 'foo bar'}};
$http(config);
</code></pre>

<p>```</p>

<p>All other methods like shortcut <code>get</code>, <code>post</code> as well as <code>$resource</code> use this form internally.
It turns out we can freely add our own properties to this <code>config</code> object. They will help us identify requests. So we can for example modify the config above as follows:</p>

<p>``` javascript modified config</p>

<pre><code>var config = {
    method: 'POST',
    url: 'http://api.myapp.com/comment',
    data: {msg: 'foo bar'},
    unique: true,
    requestId: create-comment'
};
</code></pre>

<p>```</p>

<p>This new config contains two new properties <code>unique</code> and <code>requestId</code>. The first one determines if for given types of requests we should check for duplicates or let all of them be sent (we probably can let all GET requests to go through without this check, and have e.g. POSTs checked). The second one, <code>requestId</code> is a property we'll match on when looking for duplicates. In this case it has constant value (create-comment) which means that only one POST request to <code>http://api.myapp.com/comment</code> should be pending at any time. This value can be dynamically calculated (e.g. using <code>data</code> for more fine-grained control).</p>

<p>Ok, but how can we find out which requests are currently in progress? <code>$http</code> service has one neat property called <code>pendingRequests</code> which is array of <code>config</code> objects for request that were sent. So matching duplicated requests is just a matter of searching through <code>pendingRequests</code> for request with identical <code>requestId</code> as one in our request we are about to send. So here is first part of implementation:</p>

<p>``` javascript first implementation of modified service</p>

<pre><code>app.commons.uniqueRequestsAwareHttpService = function($http) {

    var uniqueRequestOptionName = "unique";
    var requestIdOptionName = 'requestId';

    // should we care about duplicates check
    function checkForDuplicates(requestConfig) {
        return !!requestConfig[uniqueRequestOptionName];
    }

    // find identical request in pending requests
    function checkIfDuplicated(requestConfig) {
        var duplicated = $http.pendingRequests.filter(function(pendingReqConfig) {
            return pendingReqConfig[requestIdOptionName] &amp;&amp; pendingReqConfig[requestIdOptionName] === requestConfig[requestIdOptionName];
        });
        return duplicated.length &gt; 0;
    }

    var modifiedHttpService = function(requestConfig) {
        // if we need to check for dups and pending found - return
        if(checkForDuplicates(requestConfig) &amp;&amp; checkIfDuplicated(requestConfig)) {
            return;
        }
        // otherwise pass requeust to original $http service
        return $http(requestConfig);
    };

    return modifiedHttpService;
};
</code></pre>

<p>```</p>

<p>It works fine if you try it, but has one huge drawback. <code>$http</code> service calls return promises so you can attach to them using <code>then</code> function and wait for them to be either resolved or rejected. Our current implementation is not consistent in return types. In fact it returns nothing when duplicate is detected, but returns regular promise when request is passed to original <code>$http</code>. To fix it we need to construct deferred using <code>$q</code> service as below.</p>

<p>``` javascript returning promise</p>

<pre><code>app.commons.uniqueRequestsAwareHttpService = function($http, $q) {

    var DUPLICATED_REQUEST_STATUS_CODE = 499; // I just made it up - nothing special
    var EMPTY_BODY = '';
    var EMPTY_HEADERS = {};

    // previous stuff here

    function buildRejectedRequestPromise(requestConfig) {
        var dfd = $q.defer();
        // build response for duplicated request
        var response = {data: EMPTY_BODY, headers: EMPTY_HEADERS, status: DUPLICATED_REQUEST_STATUS_CODE, config: requestConfig};
        console.info('Such request is already in progres, rejecting this one with', response);
        // reject promise with response above
        dfd.reject(response);
        return dfd.promise;
    }

    var modifiedHttpService = function(requestConfig) {
        if(checkForDuplicates(requestConfig) &amp;&amp; checkIfDuplicated(requestConfig)) {
            // return rejected promise with response consistent with those from $http calls
            return buildRejectedRequestPromise(requestConfig);
        }
        return $http(requestConfig);
    };

    return modifiedHttpService;
};
</code></pre>

<p>```</p>

<p>Done, we have fully working implementation. Just one note, it works only for direct <code>$http</code> calls, if you try to fire <code>$http.get</code> or <code>$http.post</code> or even <code>$resource</code> it won't work, because those use shortcut calls defined directly on <code>$http</code>. Fix for that would be to define such functions on our modified version of <code>$http</code> service, but I'll leave it to you.</p>

<p>And that's all. This is how we solved this in <a href="http://codebrag.com">Codebrag</a> without violating DRY (at least I think so). We have fully working decorator implementation that can prevent duplicated requests from sending. It can be configure separately for every <code>$http</code> request group you define in your application. Just add <code>unique</code> and <code>requestId</code> parameters to request config.</p>

<p>I'm sure there are other methods for doing this kind of stuff. If you know one, let me know about it in comments below.</p>
]]></content>
  </entry>
  
</feed>
